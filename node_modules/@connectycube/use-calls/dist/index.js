import{jsx as e}from"react/jsx-runtime";import t,{useRef as a,useEffect as i,useState as n,useMemo as r,useCallback as s}from"react";import c from"connectycube";import{CallEvent as o,MediaType as l,CallType as u}from"connectycube/types";export{CallType,MediaType}from"connectycube/types";const d=e=>{let t;const a=new Set,i=(e,i)=>{const n="function"==typeof e?e(t):e;if(!Object.is(n,t)){const e=t;t=(null!=i?i:"object"!=typeof n||null===n)?n:Object.assign({},t,n),a.forEach(a=>a(t,e))}},n=()=>t,r={setState:i,getState:n,getInitialState:()=>s,subscribe:e=>(a.add(e),()=>a.delete(e))},s=t=e(i,n,r);return r},m=e=>e;const C=e=>{const a=(e=>e?d(e):d)(e),i=e=>function(e,a=m){const i=t.useSyncExternalStore(e.subscribe,()=>a(e.getState()),()=>a(e.getInitialState()));return t.useDebugValue(i),i}(a,e);return Object.assign(i,a),i},D=e=>(t,a,i)=>{const n=i.subscribe;i.subscribe=(e,t,a)=>{let r=e;if(t){const n=(null==a?void 0:a.equalityFn)||Object.is;let s=e(i.getState());r=a=>{const i=e(a);if(!n(s,i)){const e=s;t(s=i,e)}},(null==a?void 0:a.fireImmediately)&&t(s,s)}return n(r)};return e(t,a,i)};var S,p;!function(e){e[e.USER=0]="USER",e[e.DISPLAY=1]="DISPLAY"}(S||(S={})),function(e){e.ON_CALL="onCall",e.ON_STOP_CALLING="onStopCalling",e.ON_ACCEPT="onAccept",e.ON_REJECT="onReject",e.ON_STOP="onStop",e.ON_NOT_ANSWER="onNotAnswer",e.ON_CONNECTION_STATE="onConnectionState"}(p||(p={}));const v={incomingCallCallData:null,incomingCallStopData:null,activeCallAcceptData:null,activeCallRejectData:null,activeCallStopData:null,activeCallNotAnswerData:null,activeCallConnectionStateData:null,deviceChangeEvent:null},O={localStream:null,remoteStreams:{},userMediaParams:{video:!0,audio:!0},displayMediaParams:{video:!0,audio:!1},activeMedia:S.USER},I={activeCall:null,incomingCall:null,...v,...O,participantsIDs:new Set,hasActiveListeners:!1},y=C(D((e,t)=>({...I,setActiveCall:t=>e({activeCall:t}),resetActiveCall:()=>e({activeCall:I.activeCall}),setIncomingCall:t=>e({incomingCall:t}),resetIncomingCall:()=>e({incomingCall:I.incomingCall}),setDeviceChangeEvent:t=>e({deviceChangeEvent:t}),upsertSessionData:(t,a)=>{switch(t){case p.ON_CALL:e({incomingCallCallData:a});break;case p.ON_STOP_CALLING:e({incomingCallStopData:a});break;case p.ON_ACCEPT:e({activeCallAcceptData:a});break;case p.ON_REJECT:e({activeCallRejectData:a});break;case p.ON_STOP:e({activeCallStopData:a});break;case p.ON_NOT_ANSWER:e({activeCallNotAnswerData:a});break;case p.ON_CONNECTION_STATE:e({activeCallConnectionStateData:a})}},resetSessionData:t=>{switch(t){case p.ON_CALL:e({incomingCallCallData:v.incomingCallCallData});break;case p.ON_STOP_CALLING:e({incomingCallStopData:v.incomingCallStopData});break;case p.ON_ACCEPT:e({activeCallAcceptData:v.activeCallAcceptData});break;case p.ON_REJECT:e({activeCallRejectData:v.activeCallRejectData});break;case p.ON_STOP:e({activeCallStopData:v.activeCallStopData});break;case p.ON_NOT_ANSWER:e({activeCallNotAnswerData:v.activeCallNotAnswerData});break;case p.ON_CONNECTION_STATE:e({activeCallConnectionStateData:v.activeCallConnectionStateData});break;default:e(v)}},setLocalStream:t=>e({localStream:t}),resetLocalStream:()=>e({localStream:I.localStream}),addRemoteStream:(a,i)=>e({remoteStreams:{...t().remoteStreams,[a]:i}}),removeRemoteStream:a=>{const i={...t().remoteStreams};delete i[a],e({remoteStreams:i})},resetRemoteStreams:()=>e({remoteStreams:I.remoteStreams}),saveUserMediaParams:t=>e({userMediaParams:t}),resetUserMediaParams:()=>e({userMediaParams:I.userMediaParams}),saveDisplayMediaParams:t=>e({displayMediaParams:t}),resetDisplayMediaParams:()=>e({displayMediaParams:I.displayMediaParams}),saveActiveMedia:t=>e({activeMedia:t}),setParticipantsIDs:t=>e({participantsIDs:new Set(t)}),participantDidEnter:a=>{const i=new Set([...t().participantsIDs]);i.add(a),e({participantsIDs:i})},participantDidLeave:a=>{const i=new Set([...t().participantsIDs]);i.delete(a),e({participantsIDs:i})},activateCallsListeners:()=>e({hasActiveListeners:!0}),resetStore:()=>e({...I,hasActiveListeners:t().hasActiveListeners})}))),E=e=>Symbol.iterator in e,N=e=>"entries"in e,A=(e,t)=>{const a=e instanceof Map?e:new Map(e.entries()),i=t instanceof Map?t:new Map(t.entries());if(a.size!==i.size)return!1;for(const[e,t]of a)if(!Object.is(t,i.get(e)))return!1;return!0};function M(e,t){return!!Object.is(e,t)||"object"==typeof e&&null!==e&&"object"==typeof t&&null!==t&&(Object.getPrototypeOf(e)===Object.getPrototypeOf(t)&&(E(e)&&E(t)?N(e)&&N(t)?A(e,t):((e,t)=>{const a=e[Symbol.iterator](),i=t[Symbol.iterator]();let n=a.next(),r=i.next();for(;!n.done&&!r.done;){if(!Object.is(n.value,r.value))return!1;n=a.next(),r=i.next()}return!!n.done&&!!r.done})(e,t):A({entries:()=>Object.entries(e)},{entries:()=>Object.entries(t)})))}function g(e){const a=t.useRef(void 0);return t=>{const i=e(t);return M(a.current,i)?a.current:a.current=i}}const T="useCalls",b=(e,...t)=>{console.log(`[${T}][${e}][Log]:`,...t)},_=(e,...t)=>{console.error(`[${T}][${e}][Error]:`,...t)},f=({muted:t,mirror:n,style:r={},...s})=>{const[c,o,l,u]=y(g(e=>[e.localStream,e.userMediaParams,e.displayMediaParams,e.activeMedia])),d=a(null),m=u===S.USER,C=m?o:l,D=C.elementId??"ConnectyCubeMediaStream-local",p=C.options??{},v="boolean"==typeof t?t:"boolean"!=typeof p.muted||p.muted,O={transform:("boolean"==typeof n?n:"boolean"==typeof p.mirror?p.mirror:m)?"scaleX(-1)":"none",objectFit:"contain",height:"100%",width:"100%",...r};return i(()=>{d.current&&c&&(d.current.srcObject=c,d.current.onloadedmetadata=()=>{try{d.current?.play()}catch(e){_("<LocalStreamView/> play()",e)}})},[c]),c?e("video",{autoPlay:!0,playsInline:!0,ref:d,id:D,muted:v,style:O,...s}):null},L=({userID:t,mirror:n=!1,style:r={},...s})=>{const c=y(e=>e.remoteStreams),o=t&&c[t],l=a(null),u=`ConnectyCubeMediaStream-${t}`,d={transform:n?"scaleX(-1)":"none",objectFit:"contain",height:"100%",width:"100%",...r};return i(()=>{l.current&&o&&(l.current.srcObject=o,l.current.onloadedmetadata=()=>{try{l.current?.play()}catch(e){_("<RemoteStreamView/> play()",e)}})},[o]),o?e("video",{autoPlay:!0,playsInline:!0,ref:l,id:u,style:d,...s}):null},P=e=>{const t=a(y.getState()[e]);return i(()=>{const a=y.subscribe(t=>t[e],e=>{t.current=e});return()=>a()},[e]),t};var h;!function(e){e.MUTE_AUDIO="audio-mute",e.UNMUTE_AUDIO="audio-unmute",e.MUTE_VIDEO="video-mute",e.UNMUTE_VIDEO="video-unmute"}(h||(h={}));const U=()=>{const e=(()=>{const[e,t]=n(0),[a,i,o,u,d,m,C,D,p]=y(g(e=>[e.activeCall,e.localStream,e.remoteStreams,e.userMediaParams,e.saveUserMediaParams,e.displayMediaParams,e.saveDisplayMediaParams,e.activeMedia,e.saveActiveMedia])),v=r(()=>{const e=i?.getAudioTracks();return!e||0===e.length||e.every(e=>!e.enabled)},[i,e]),O=r(()=>{const e=i?.getVideoTracks();return!e||0===e.length||e.every(e=>!e.enabled)},[i,e]),I=s(async e=>{if(a){switch(e){case h.MUTE_AUDIO:a.mute(l.AUDIO);break;case h.MUTE_VIDEO:a.mute(l.VIDEO);break;case h.UNMUTE_AUDIO:a.unmute(l.AUDIO);break;case h.UNMUTE_VIDEO:a.unmute(l.VIDEO)}t(e=>e+1)}},[a]);return{isLocalAudioMuted:v,isLocalVideoMuted:O,muteAudio:()=>{I(h.MUTE_AUDIO)},muteVideo:()=>{I(h.MUTE_VIDEO)},unmuteAudio:()=>{I(h.UNMUTE_AUDIO)},unmuteVideo:()=>{I(h.UNMUTE_VIDEO)},localStream:i,remoteStreams:o,getUserMedia:async e=>{try{const t=await(a?.getUserMedia(e??u));return p(S.USER),t}catch(e){_("getUserMedia",{error:e})}},getDisplayMedia:async e=>{try{const t=await(a?.getDisplayMedia(e??m));return p(S.DISPLAY),t}catch(e){_("getDisplayMedia",{error:e})}},getMediaDevices:async e=>{try{return await c.videochat.getMediaDevices(e)}catch(e){_("getMediaDevices",{error:e})}},switchMediaTracks:async e=>{try{return await(a?.switchMediaTracks(e))}catch(e){_("switchMediaTracks",{error:e})}},userMediaParams:u,setUserMediaParams:async e=>{e&&d(e)},displayMediaParams:m,setDisplayMediaParams:async e=>{e&&C(e)},activeMedia:D,setActiveMedia:async e=>{e&&p(e)}}})(),[t,a,d,m,C,D,v,O,I,E,N,A,M,T,f,L,U,w,R,j]=y(g(e=>[e.activeCall,e.setActiveCall,e.incomingCall,e.resetIncomingCall,e.setLocalStream,e.userMediaParams,e.displayMediaParams,e.activeMedia,e.deviceChangeEvent,e.incomingCallCallData,e.incomingCallStopData,e.activeCallAcceptData,e.activeCallRejectData,e.activeCallStopData,e.activeCallNotAnswerData,e.activeCallConnectionStateData,e.resetSessionData,e.participantsIDs,e.setParticipantsIDs,e.resetStore])),k=P("hasActiveListeners"),{setupListeners:V}=(()=>{const[e,t,a,i,n,r,s,l,u]=y(g(e=>[e.setIncomingCall,e.resetIncomingCall,e.addRemoteStream,e.removeRemoteStream,e.setDeviceChangeEvent,e.upsertSessionData,e.participantDidEnter,e.participantDidLeave,e.activateCallsListeners])),d=P("activeCall"),m=P("incomingCall"),C=(t,a)=>{t.initiatorID!==t.currentUserID&&(e(t),r(p.ON_CALL,{userInfo:a}),b("onCall",{session:t,ext:a}))},D=(e,t,a)=>{s(t),r(p.ON_ACCEPT,{userID:t,userInfo:a}),b("onAccept",{session:e,userID:t,ext:a})},S=(e,t,a)=>{l(t),r(p.ON_REJECT,{userID:t,userInfo:a}),b("onReject",{session:e,userID:t,ext:a})},v=(e,a,n)=>{d.current?.ID===e.ID&&(l(a),i(a),r(p.ON_STOP,{userID:a,userInfo:n})),m.current?.ID===e.ID&&(r(p.ON_STOP_CALLING,{userID:a,userInfo:n}),t()),b("onStop",{session:e,userID:a,ext:n})},O=(e,t)=>{l(t),r(p.ON_NOT_ANSWER,{userID:t}),b("onNotAnswer",{session:e,userID:t})},I=(e,t,i)=>{a(t,i),b("onRemoteStream",{session:e,userID:t,stream:i})},E=(e,t,a)=>{r(p.ON_CONNECTION_STATE,{userID:t,connectionState:a}),b("onConnectionState",{session:e,userID:t,connectionState:a})},N=e=>{n(e),b("onDevicesChange",{event:e})};return{setupListeners:()=>{c.videochat.addListener(o.CALL,C),c.videochat.addListener(o.ACCEPT,D),c.videochat.addListener(o.REJECT,S),c.videochat.addListener(o.STOP,v),c.videochat.addListener(o.NOT_ANSWER,O),c.videochat.addListener(o.REMOTE_STREAM,I),c.videochat.addListener(o.CONNECTION_STATE,E),c.videochat.addListener(o.DEVICES,N),u()}}})(),x=s(async e=>{if(d){const{currentUserID:t,initiatorID:a,opponentsIDs:i}=d,n=[...i,a].filter(e=>e!==t);U(),R(n);try{await $(d),d.accept(e),m()}catch(t){_("acceptCall",t),d.stop(e)}finally{m()}}},[d]),J=s(e=>{d?.reject(e),m()},[d]),W=s(e=>{j(),t?.stop(e)},[t]),$=s(async e=>{const t=O===S.DISPLAY?await e.getDisplayMedia(v):await e.getUserMedia(D);e.callType===u.AUDIO&&t.getVideoTracks().forEach(e=>e.enabled=!1),C(t),a(e)},[O,D,v]);return i(()=>{t&&0===w.size&&W()},[t,w]),i(()=>{k.current||V()},[]),{startCall:async(e=[],t=u.VIDEO,a)=>{const i=Array.isArray(e)?e:[e],n=c.videochat.createNewSession(i,t);try{U(),R(i),await $(n),n.call(a)}catch(e){_("startCall",e),R([])}},acceptCall:x,rejectCall:J,stopCall:W,activeCall:t,incomingCall:d,deviceChangeEvent:I,incomingCallCallData:E,incomingCallStopData:N,activeCallAcceptData:A,activeCallRejectData:M,activeCallStopData:T,activeCallNotAnswerData:f,activeCallConnectionStateData:L,resetSessionData:U,participantsIds:[...w],...e}};export{S as ActiveMedia,p as CallDataType,f as LocalStreamView,L as RemoteStreamView,U as useCalls};
//# sourceMappingURL=index.js.map
