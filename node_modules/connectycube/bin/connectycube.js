#!/usr/bin/env node
import { execSync } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';

const loggerName = 'connectycube';
const args = process.argv.slice(2);

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function applyPatchSSR() {
  try {
    const patchesDirAbsolute = path.resolve(__dirname, 'ssr/patches');
    const patchesDirRelative = path.relative(process.cwd(), patchesDirAbsolute);

    console.log(`[${loggerName}] Applying patches from '${patchesDirRelative}'`);
    execSync(`npx patch-package --patch-dir ${patchesDirRelative}`, { stdio: 'inherit' });
    console.log(`[${loggerName}] Patches applied successfully`);
  } catch (e) {
    console.error(`[${loggerName}] Failed to apply patches:`, e);
    process.exit(1);
  }
}

async function revertPatchSSR() {
  try {
    const patchesDirAbsolute = path.resolve(__dirname, 'ssr/patches');
    const patchesDirRelative = path.relative(process.cwd(), patchesDirAbsolute);

    console.log(`[${loggerName}] Reverting patches from '${patchesDirRelative}'`);
    execSync(`npx patch-package --patch-dir ${patchesDirRelative} --reverse`, { stdio: 'inherit' });
    console.log(`[${loggerName}] Patches reverted successfully`);
  } catch (e) {
    console.error(`[${loggerName}] Failed to revert patches:`, e);
    process.exit(1);
  }
}

async function main() {
  if (args.length === 0) {
    console.log('Usage: connectycube <command>');
    console.log('Commands:');
    console.log('"patch-ssr": Apply SSR patches');
    console.log('"revert-ssr": Revert SSR patches');
    process.exit(0);
  }

  switch (args[0]) {
    case 'patch-ssr':
      await applyPatchSSR();
      break;
    case 'revert-ssr':
      await revertPatchSSR();
      break;
    default:
      console.error(`[${loggerName}] Unknown command: ${args[0]}`);
      process.exit(1);
  }
}

main();