import { Client as _Client, jid as _jid, xml as _xml } from '@xmpp/client-core';
import { Element } from '@xmpp/xml';
import _connection from '@xmpp/connection';
import _reconnect from '@xmpp/reconnect';
import _middleware from '@xmpp/middleware';
import _streamFeatures from '@xmpp/stream-features';
import _iqCaller from '@xmpp/iq/caller.js';
import _iqCallee from '@xmpp/iq/callee.js';
import _sasl from '@xmpp/sasl';
import _resourceBinding from '@xmpp/resource-binding';
export interface Options extends _connection.Options {
    resource?: _resourceBinding.Resource | undefined;
    credentials?: _sasl.Credentials | undefined;
    username?: string | undefined;
    password?: string | undefined;
}
export interface XMPPClient extends _Client {
    entity: _Client;
    reconnect: _reconnect.Reconnect<_Client>;
    websocket: any;
    middleware: _middleware.Middleware<_Client>;
    streamFeatures: _streamFeatures.StreamFeatures<_Client>;
    iqCaller: _iqCaller.IQCaller<_Client>;
    iqCallee: _iqCallee.IQCallee<_Client>;
    starttls: _middleware.Middleware<_Client>;
    resolve: any;
    sasl: _sasl.SASL;
    resourceBinding: any;
    sessionEstablishment: any;
    mechanisms: {
        [x: string]: any;
    }[];
    options: Options;
    sendOnline: (element: Element, ...args: unknown[]) => Promise<void>;
}
export declare function xmppClient(options: Options): XMPPClient;
export declare const jid: typeof _jid;
export declare const xml: typeof _xml;
//# sourceMappingURL=xmpp.d.ts.map