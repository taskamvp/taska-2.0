import { XMPPClient } from './xmpp';
import ProxyService from '../Proxy';
import DialogsService from './Dialogs';
import MessagesService from './Messages';
import ChatHelpers from './Helpers';
import StreamManagement from './StreamManagement';
import WebRTCSignalingProcessor from '../videocalling/WebRTCSignalingProcessor';
import PrivacyList from './PrivacyList';
import MultiUserChat from './MultiUserChat';
import { Chat, ChatEvent } from '../types';
export default class ChatService {
    proxy: ProxyService;
    dialog: DialogsService;
    message: MessagesService;
    xmppClient: XMPPClient;
    helpers: ChatHelpers;
    privacylist: PrivacyList;
    muc: MultiUserChat;
    streamManagement: StreamManagement;
    webrtcSignalingProcessor: WebRTCSignalingProcessor;
    isConnected: boolean;
    private isConnecting;
    private isLogout;
    private isReconnect;
    stanzasCallbacks: Chat.StanzasCallbacks;
    private xmppClientListeners;
    private connectPromise;
    private earlyIncomingMessagesQueue;
    onChatStatusListener: Chat.OnChatStatusListener;
    onConnectionErrorListener: Chat.OnChatConnectionErrorListener;
    onDisconnectedListener: Chat.OnChatDisconnectedListener;
    onReconnectListener: Chat.OnChatReconnectedListener;
    onMessageListener: Chat.OnMessageListener;
    onSystemMessageListener: Chat.OnMessageSystemListener;
    onMessageErrorListener: Chat.OnMessageErrorListener;
    onMessageTypingListener: Chat.OnMessageTypingListener;
    onMessageUpdateListener: Chat.OnMessageUpdateListener;
    onMessageDeleteListener: Chat.OnMessageDeleteListener;
    onMessageReactionsListener: Chat.OnMessageReactionsListener;
    onSentMessageCallback: Chat.OnMessageSentListener;
    onDeliveredStatusListener: Chat.OnMessageDeliveredListener;
    onReadStatusListener: Chat.OnMessageReadListener;
    onLastUserActivityListener: Chat.OnLastUserActivityListener;
    onJoinOccupant: Chat.OnDialogJoinListener;
    onLeaveOccupant: Chat.OnDialogLeaveListener;
    onKickOccupant: Chat.OnDialogKickListener;
    constructor(proxy: ProxyService);
    get connectionStatus(): keyof import("@xmpp/connection").StatusEvents;
    connect(params: Chat.ConnectionParams): Promise<boolean>;
    ping(): Promise<void>;
    pingWithTimeout(timeout?: number): Promise<unknown>;
    send(jidOrUserId: string | number, message?: Chat.MessageParams): string;
    sendSystemMessage(jidOrUserId: string | number, message: Chat.SystemMessageParams): string;
    sendIsTypingStatus(jidOrUserId: string | number): void;
    sendIsStopTypingStatus(jidOrUserId: string | number): void;
    sendDeliveredStatus(params: Chat.MessageStatusParams): void;
    sendReadStatus(params: Chat.MessageStatusParams): void;
    editMessage(params: Chat.EditMessageParams): void;
    deleteMessage(params: Chat.DeleteMessageParams): void;
    getLastUserActivity(jidOrUserId: string | number): Promise<Chat.LastActivity>;
    private onLastActivityStanza;
    markActive(): void;
    markInactive(): void;
    disconnect(): Promise<boolean>;
    terminate(): void;
    search(params: Chat.SearchParams): Promise<Chat.SearchResult>;
    private onMessage;
    private onPresence;
    private onIQ;
    private onSystemMessage;
    private onMessageError;
    private postConnectActions;
    private enableCarbons;
    private setSubscriptionToUserLastActivity;
    subscribeToUserLastActivityStatus(jidOrUserId: string | number): void;
    unsubscribeFromUserLastActivityStatus(jidOrUserId: string | number): void;
    private addXMPPClientListener;
    private removeXMPPClientListener;
    private removeAllXMPPClientListeners;
    private getListenerByName;
    addListener(name: ChatEvent, listener: Chat.Listeners): () => void;
    removeListener(name: ChatEvent): void;
    removeAllListeners(): void;
}
//# sourceMappingURL=Chat.d.ts.map