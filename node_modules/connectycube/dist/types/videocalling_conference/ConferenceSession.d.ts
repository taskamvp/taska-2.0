import { Auth, Janus, Media } from '../types';
export default class ConferenceSession {
    private client;
    id: string;
    currentUserDisplayName?: string;
    localStream?: MediaStream;
    mediaParams: MediaStreamConstraints;
    onParticipantJoinedListener: Janus.OnParticipantJoinedListener;
    onParticipantLeftListener: Janus.OnParticipantLeftListener;
    onSlowLinkListener: Janus.OnSlowLinkListener;
    onRemoteStreamListener: Janus.OnRemoteStreamListener;
    onRemoteTracksUpdatedListener: Janus.OnRemoteTracksUpdatedListener;
    onRemoteConnectionStateChangedListener: Janus.OnRemoteConnectionStateChangedListener;
    onDataChannelOpenedListener: Janus.OnDataChannelOpenedListener;
    onDataChannelMessageListener: Janus.OnDataChannelMessageListener;
    onSessionConnectionStateChangedListener: Janus.OnSessionConnectionStateChangedListener;
    onErrorListener: Janus.OnErrorListener;
    constructor(token: Auth.Session['token']);
    get currentRoomId(): string | null;
    set currentRoomId(roomId: string | null);
    get currentPublisherPC(): any;
    private createSession;
    join(roomId: string, user_id: number, userDisplayName: string): Promise<void>;
    joinAsListener(roomId: string, user_id: number, userDisplayName: string): Promise<void>;
    sendKeyframeRequest(roomId: string): Promise<any>;
    private createHandler;
    private joinInternal;
    private onParticipantJoined;
    private onParticipantLeft;
    private onError;
    private onDataChannelOpen;
    private onDataChannelMessage;
    private onLocalIceStateChanged;
    private onRemoteIceStateChanged;
    private onRemoteStream;
    private onRemoteTracksUpdated;
    private onSlowLink;
    listOfOnlineParticipants(): Promise<any>;
    leave(): Promise<void>;
    leaveGroup(): Promise<void>;
    destroy(): Promise<void>;
    detachVideoConferencingPlugin(): Promise<void>;
    getDisplayMedia(params: Media.DisplayParams): Promise<MediaStream>;
    getUserMedia(params: Media.UserParams): Promise<MediaStream>;
    private upsertStream;
    private replaceTracks;
    switchMediaTracks(options: Media.TrackConstraintsOrDeviceIds): Promise<MediaStream>;
    muteVideo(): void;
    unmuteVideo(): void;
    muteAudio(): void;
    unmuteAudio(): void;
    isVideoMuted(): boolean;
    isAudioMuted(): boolean;
    getUserVolume(): Promise<any>;
    getRemoteUserBitrate(userId: number): any;
    getRemoteUserVolume(userId: number): Promise<any>;
    attachMediaStream(elementId: string, stream: MediaStream, opt?: Media.ElementOptions): void;
    detachMediaStream(elementId: string, opt?: Media.ElementOptions): void;
    sendData(data: any, label: any): Promise<any>;
}
//# sourceMappingURL=ConferenceSession.d.ts.map