declare global {
    interface Window {
        adapter: any;
    }
}
export declare const base64Encode: (str: string) => string;
export declare const sdkVersion = "define_sdk_version_replacer";
export declare const isBrowser: boolean;
export declare const isNodeJS: boolean;
export declare const isReactNative: boolean;
export declare const isExpo: boolean;
declare let fetchImpl: any;
declare let FormDataImpl: any;
export { fetchImpl, FormDataImpl };
export declare const navigator: Navigator;
export declare const mediaDevices: MediaDevices;
export declare const MediaStream: {
    new (): MediaStream;
    new (stream: MediaStream): MediaStream;
    new (tracks: MediaStreamTrack[]): MediaStream;
    prototype: MediaStream;
};
export declare const MediaStreamTrack: {
    new (): MediaStreamTrack;
    prototype: MediaStreamTrack;
};
export declare const RTCIceCandidate: {
    new (candidateInitDict?: RTCIceCandidateInit): RTCIceCandidate;
    prototype: RTCIceCandidate;
};
export declare const RTCPeerConnection: {
    new (configuration?: RTCConfiguration): RTCPeerConnection;
    prototype: RTCPeerConnection;
    generateCertificate(keygenAlgorithm: AlgorithmIdentifier): Promise<RTCCertificate>;
};
export declare const RTCRtpReceiver: {
    new (): RTCRtpReceiver;
    prototype: RTCRtpReceiver;
    getCapabilities(kind: string): RTCRtpCapabilities | null;
};
export declare const RTCRtpSender: {
    new (): RTCRtpSender;
    prototype: RTCRtpSender;
    getCapabilities(kind: string): RTCRtpCapabilities | null;
};
export declare const RTCSessionDescription: {
    new (descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription;
    prototype: RTCSessionDescription;
};
export declare const isWebRTCAvailable: boolean;
export declare const adapter: any;
//# sourceMappingURL=platform.d.ts.map