import { DateOrTimestamp, SearchCondition } from './common';
export declare enum MeetingDateMetric {
    MINUTES = "minutes",
    HOURS = "hours",
    DAYS = "days",
    WEEK = "weeks"
}
export declare namespace ConnectyCubeMeetings {
    type Attendee = {
        id?: number;
        email?: string;
    };
    type Meeting = {
        _id: string;
        name?: string;
        start_date?: DateOrTimestamp;
        end_date?: DateOrTimestamp;
        attendees?: Attendee[];
        record?: boolean | null;
        chat_dialog_id?: string | null;
        created_at?: DateOrTimestamp;
        updated_at?: DateOrTimestamp;
        host_id?: number;
        public?: boolean;
        scheduled?: boolean;
        notify?: boolean;
        notify_before?: {
            metric: MeetingDateMetric | string;
            value: number;
        };
        timezone?: {
            offset: number;
            name: string;
        };
    };
    type Recording = {
        _id: string;
        room_id: string;
        participants_ids: number[];
        updated_at: string;
        created_at: string;
        download_url: string;
        participants_count: number;
        duration: number;
        size: number;
    };
    type GetParams = {
        _id?: string;
        limit?: number;
        offset?: number;
        start_at?: SearchCondition<DateOrTimestamp>;
        end_at?: SearchCondition<DateOrTimestamp>;
        updated_at?: SearchCondition<DateOrTimestamp>;
        created_at?: SearchCondition<DateOrTimestamp>;
        scheduled?: SearchCondition<boolean>;
    };
    type CreateParams = {
        name?: string;
        start_date?: DateOrTimestamp;
        end_date?: DateOrTimestamp;
        attendees?: Attendee[];
        chat?: boolean;
        record?: boolean;
        public?: boolean;
        scheduled?: boolean;
        notify?: boolean;
        notify_before?: {
            metric: MeetingDateMetric | string;
            value: number;
        };
        timezone?: {
            offset: number;
            name: string;
        };
    };
    type UpdateParams = {
        name: string;
        start_date: DateOrTimestamp;
        end_date: DateOrTimestamp;
        attendees: Attendee[];
        record?: boolean;
        public?: boolean;
        scheduled?: boolean;
        notify?: boolean;
        notify_before?: {
            metric: MeetingDateMetric | string;
            value: number;
        };
        timezone?: {
            offset: number;
            name: string;
        };
    };
}
//# sourceMappingURL=meetings.d.ts.map