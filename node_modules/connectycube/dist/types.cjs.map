{"version":3,"file":"types.cjs","sources":["../src/types/addressbook.ts","../src/types/auth.ts","../src/types/calls.ts","../src/types/chat.ts","../src/types/config.ts","../src/types/data.ts","../src/types/dialogs.ts","../src/types/janus.ts","../src/types/media.ts","../src/types/meetings.ts","../src/types/proxy.ts","../src/types/pushnotifications.ts"],"sourcesContent":["import { ForceParams } from './common';\nimport { ConnectyCubeUsers } from './users';\n\nexport enum AddressBookUserDataType {\n  COMPACT = 1,\n  FULL = 0,\n}\n\nexport namespace ConnectyCubeAddressBook {\n  export type Contact = { name: string; phone: string; destroy?: number | string };\n  // Request parameters type\n  export type UploadParams = { udid?: string } & ForceParams;\n  export type GetRegisteredUsersParams = boolean | { udid?: string; compact: AddressBookUserDataType | number }; // 1 - compact user data, 0 - full user data\n  // Response data types\n  export type UploadResponse = {\n    deleted: number;\n    rejected: Record<string | number, string[]>;\n    created: number;\n    updated: number;\n  };\n  export type GetRegisteredUsersResponse = {\n    items: Partial<ConnectyCubeUsers.User> & { address_book_name: string }[];\n  };\n}\n","import { DateOrTimestamp } from './common';\nimport { ConnectyCubeUsers } from './users';\n\nexport enum LoginProviderNames {\n  FACEBOOK = 'facebook',\n  TWITTER = 'twitter',\n  FIREBASE_PHONE = 'firebase_phone',\n  FIREBASE_EMAIL = 'firebase_email',\n}\n\nexport namespace ConnectyCubeAuth {\n  export type Session = {\n    id: number;\n    user_id: number;\n    application_id: string | number;\n    token: string;\n    ts: DateOrTimestamp;\n    created_at: DateOrTimestamp;\n    updated_at: DateOrTimestamp;\n    user?: ConnectyCubeUsers.User | null;\n  };\n  export type LoginProviderKeys = { token: string; secret?: string };\n  export type LoginFirebaseKeys = { project_id: string | number; access_token: string };\n  export type LoginByLogin = { login: string; password: string };\n  export type LoginByEmail = { email: string; password: string };\n  export type LoginByGuest = { guest: '1'; full_name: string };\n  // Login by social providers\n  export type LoginByFacebook = {\n    provider: LoginProviderNames.FACEBOOK;\n    keys: LoginProviderKeys;\n  };\n  export type LoginByTwitter = {\n    provider: LoginProviderNames.TWITTER;\n    keys: LoginProviderKeys;\n  };\n  export type LoginByFirebasePhone = {\n    provider: LoginProviderNames.FIREBASE_PHONE;\n    firebase_phone: LoginFirebaseKeys;\n  };\n  export type LoginByFirebaseEmail = {\n    provider: LoginProviderNames.FIREBASE_EMAIL;\n    firebase_email: LoginFirebaseKeys;\n  };\n  // Request parameters type\n  export type LoginParams =\n    | LoginByLogin\n    | LoginByEmail\n    | LoginByGuest\n    | LoginByFacebook\n    | LoginByTwitter\n    | LoginByFirebasePhone\n    | LoginByFirebaseEmail;\n  export type GeneratedSessionParams = {\n    application_id: string | number;\n    auth_key: string;\n    user?: LoginByLogin | LoginByEmail | LoginByGuest;\n    provider?: LoginProviderNames;\n    keys?: LoginProviderKeys;\n    firebase_phone?: LoginFirebaseKeys;\n    firebase_email?: LoginFirebaseKeys;\n  };\n  // Response data type\n  export type LoginRawResponse = { user: ConnectyCubeUsers.User; [key: string]: any };\n  export type GetSessionRawResponse = { session: Session; [key: string]: any };\n}\n","import WebRTCSession from '../videocalling/WebRTCSession';\nimport WebRTCSignalingProvider from '../videocalling/WebRTCSignalingProvider';\n\nexport const CallSignalingModuleIdentifier = 'WebRTCVideoChat';\n\nexport enum CallSignalingType {\n  CALL = 'call',\n  ACCEPT = 'accept',\n  REJECT = 'reject',\n  STOP = 'hangUp',\n  RESTART = 'iceRestart',\n  RESTART_ACCEPT = 'iceRestartAccept',\n  CANDIDATE = 'iceCandidates',\n}\nexport enum CallSessionConnectionState {\n  UNDEFINED = 0,\n  CONNECTING = 1,\n  CONNECTED = 2,\n  FAILED = 3,\n  DISCONNECTED = 4,\n  CLOSED = 5,\n  COMPLETED = 6,\n}\nexport enum CallSessionState {\n  NEW = 1,\n  ACTIVE = 2,\n  STOPPED = 3,\n  REJECTED = 4,\n  CLOSED = 5,\n}\nexport enum CallType {\n  VIDEO = 1,\n  AUDIO = 2,\n}\nexport enum CallEvent {\n  CALL = 'call',\n  ACCEPT = 'accept',\n  REJECT = 'reject',\n  STOP = 'stop',\n  INVALID = 'invalid',\n  NOT_ANSWER = 'not-answer',\n  REMOTE_STREAM = 'remote-stream',\n  CONNECTION_STATE = 'connection-state',\n  CLOSE = 'close',\n  STATS_REPORT = 'stats-report',\n  DEVICES = 'devices',\n}\nexport enum PeerConnectionState {\n  NEW = 1,\n  CONNECTING = 2,\n  CHECKING = 3,\n  CONNECTED = 4,\n  DISCONNECTED = 5,\n  FAILED = 6,\n  CLOSED = 7,\n  COMPLETED = 8,\n}\n\nexport namespace ConnectyCubeCalls {\n  export type UserInfo = {\n    maxBandwidth?: number;\n    bandwidth?: number;\n    [key: string]: any;\n  };\n  export type ExtensionParams = {\n    callType?: CallType;\n    callerID?: number;\n    iceCandidates?: RTCIceCandidateInit[];\n    opponentsIDs?: number[];\n    userInfo?: UserInfo;\n    sessionID?: string;\n    [key: string]: any;\n  };\n  export type Session = WebRTCSession;\n  export type SignalingProvider = WebRTCSignalingProvider;\n  export type SessionParams = {\n    ID: string | null;\n    initiatorID: number;\n    opponentsIDs: number[];\n    callType: CallType;\n    signalingProvider: SignalingProvider;\n    currentUserID: number;\n    maxBandwidth: number;\n  };\n  // Listeners\n  export type OnCallListener = (session: Session, userInfo: UserInfo) => void;\n  export type OnAcceptCallListener = (session: Session, userID: number, userInfo: UserInfo) => void;\n  export type OnRejectCallListener = (session: Session, userID: number, userInfo: UserInfo) => void;\n  export type OnStopCallListener = (session: Session, userID: number, userInfo: UserInfo) => void;\n  export type OnInvalidEventsListener = (session: Session, userID: number, userInfo: UserInfo) => void;\n  export type OnUserNotAnswerListener = (session: Session, userID: number) => void;\n  export type OnRemoteStreamListener = (session: Session, userID: number, stream: MediaStream) => void;\n  export type OnSessionConnectionStateChangedListener = (\n    session: Session,\n    userID: number,\n    connectionState: CallSessionConnectionState\n  ) => void;\n  export type OnSessionCloseListener = (session: Session) => void;\n  export type OnCallStatsReportListener = (session: Session, userID: number, stats: any, error: Error) => void;\n  export type OnDevicesChangeListener = ((this: MediaDevices, ev: Event) => any) | ((ev: Event) => any);\n  export type Listeners =\n    | OnCallListener\n    | OnAcceptCallListener\n    | OnRejectCallListener\n    | OnStopCallListener\n    | OnInvalidEventsListener\n    | OnUserNotAnswerListener\n    | OnRemoteStreamListener\n    | OnSessionConnectionStateChangedListener\n    | OnSessionCloseListener\n    | OnCallStatsReportListener\n    | OnDevicesChangeListener;\n  export type ListenerName =\n    | 'onCallListener'\n    | 'onAcceptCallListener'\n    | 'onRejectCallListener'\n    | 'onStopCallListener'\n    | 'onInvalidEventsListener'\n    | 'onUserNotAnswerListener'\n    | 'onRemoteStreamListener'\n    | 'onSessionConnectionStateChangedListener'\n    | 'onSessionCloseListener'\n    | 'onCallStatsReport'\n    | 'onDevicesChangeListener';\n}\n","import { Element, Node } from '@xmpp/xml';\nimport { ConnectyCubeDialogs } from './dialogs';\nimport { ConnectyCubeUsers } from './users';\nimport Connection from '@xmpp/connection';\n\nexport enum ChatType {\n  CHAT = 'chat',\n  GROUPCHAT = 'groupchat',\n}\nexport enum ChatEvent {\n  STATUS = 'status',\n  ERROR = 'error',\n  DISCONNECTED = 'disconnected',\n  RECONNECTED = 'reconnected',\n  MESSAGE = 'message',\n  SYSTEM_MESSAGE = 'system-message',\n  ERROR_MESSAGE = 'error-message',\n  TYPING_MESSAGE = 'typing-message',\n  UPDATE_MESSAGE = 'update-message',\n  DELETE_MESSAGE = 'delete-message',\n  REACTIONS_MESSAGE = 'reactions-message',\n  DELIVERED_MESSAGE = 'delivered-message',\n  READ_MESSAGE = 'read-message',\n  SENT_MESSAGE = 'sent-message',\n  USER_LAST_ACTIVITY = 'user-last-activity',\n  JOIN = 'join',\n  LEAVE = 'leave',\n  KICK = 'kick',\n}\nexport enum PrivacyListAction {\n  ALLOW = 'allow',\n  DENY = 'deny',\n}\nexport namespace ConnectyCubeChat {\n  export type XmlElement = Element;\n  export type XmlNode = Node;\n  export type StanzaCallback = (stanza: Element) => void;\n  export type StanzasCallbacks = { [stanzaId: string]: StanzaCallback };\n  export type ConnectionParams = { userId: number; password: string };\n  export type ConnectionStatus = keyof Connection.StatusEvents;\n  export type MessageParams = {\n    id?: string;\n    type?: ChatType | string;\n    body?: string | null;\n    extension?: any;\n    markable?: 1;\n  };\n  export type Message = {\n    id: string;\n    dialog_id: string | null;\n    recipient_id: string | number | null;\n    is_forwarded: boolean;\n    type: ChatType | string;\n    body: string | null;\n    extension: any;\n    delay: any;\n    markable?: 1;\n  };\n  export type SystemMessageParams = {\n    id?: string;\n    body?: string | null;\n    extension?: any;\n  };\n  export type SystemMessage = {\n    id: string;\n    body: string;\n    userId: number;\n    extension: any;\n  };\n  export type MessageStatusParams = {\n    messageId: string;\n    dialogId: string;\n    userId: number;\n  };\n  export type EditMessageParams = {\n    to: string | number;\n    dialogId: string;\n    body: string;\n    originMessageId: string;\n    extension?: any;\n    last?: boolean;\n  };\n  export type DeleteMessageParams = {\n    to: string;\n    dialogId: string;\n    messageId: string;\n  };\n  export type LastActivity = {\n    userId: number | null;\n    seconds: number;\n  };\n  export type SearchParams = {\n    search_text?: string;\n    start_date?: number | string | Date;\n    end_date?: number | string | Date;\n    chat_dialog_ids?: string | string[];\n  };\n  export type SearchResult = {\n    results: {\n      dialogs: ConnectyCubeDialogs.Dialog[];\n      messages: any[];\n      users: ConnectyCubeUsers.User[];\n    };\n    [key: string]: any;\n  };\n  export type UserJIDParams = {\n    userId?: number;\n    resource?: string;\n    jid?: string;\n    [key: string]: any;\n  };\n  // XMPP client events and listeners\n  export type XMPPClientEvent = string | symbol;\n  export type XMPPClientListener = (...args: any[]) => void;\n  export type XMPPClientListeners = Map<XMPPClientEvent, XMPPClientListener>;\n  // Chat listeners\n  export type OnChatStatusListener = (status: ConnectionStatus) => void;\n  export type OnChatConnectionErrorListener = (error: Error) => void;\n  export type OnChatDisconnectedListener = () => void;\n  export type OnChatReconnectedListener = () => void;\n  export type OnMessageListener = (userId: number, message: Message) => void;\n  export type OnMessageSystemListener = (message: SystemMessage) => void;\n  export type OnMessageErrorListener = (messageId: string, error: { code: number; info: string }) => void;\n  export type OnMessageTypingListener = (typing: boolean, userId: number, dialogId: string) => void;\n  export type OnMessageUpdateListener = (\n    messageId: string,\n    isLast: boolean,\n    updatedBody: string,\n    dialogId: string,\n    userId: number,\n    extraParams: object | null\n  ) => void;\n  export type OnMessageDeleteListener = (messageId: string, dialogId: string, userId: number) => void;\n  export type OnMessageReactionsListener = (\n    messageId: string,\n    userId: number,\n    dialogId: string,\n    add: string,\n    remove: string\n  ) => void;\n  export type OnMessageDeliveredListener = (messageId: string, dialogId: string, userId: number) => void;\n  export type OnMessageReadListener = (messageId: string, dialogId: string, userId: number) => void;\n  export type OnMessageSentListener = (lost: MessageParams | null, sent: MessageParams | null) => void;\n  export type OnLastUserActivityListener = (userId: LastActivity['userId'], seconds: LastActivity['seconds']) => void;\n  export type OnDialogJoinListener = (dialogId: string, userId: number) => void;\n  export type OnDialogLeaveListener = (dialogId: string, userId: number) => void;\n  export type OnDialogKickListener = (dialogId: string, initiatorId: number) => void;\n  export type Listeners =\n    | OnChatStatusListener\n    | OnChatConnectionErrorListener\n    | OnChatDisconnectedListener\n    | OnChatReconnectedListener\n    | OnMessageListener\n    | OnMessageSystemListener\n    | OnMessageErrorListener\n    | OnMessageTypingListener\n    | OnMessageUpdateListener\n    | OnMessageDeleteListener\n    | OnMessageReactionsListener\n    | OnMessageDeliveredListener\n    | OnMessageReadListener\n    | OnMessageSentListener\n    | OnLastUserActivityListener\n    | OnDialogJoinListener\n    | OnDialogLeaveListener\n    | OnDialogKickListener;\n  export type ListenerName =\n    | 'onChatStatusListener'\n    | 'onConnectionErrorListener'\n    | 'onDisconnectedListener'\n    | 'onReconnectListener'\n    | 'onMessageListener'\n    | 'onSystemMessageListener'\n    | 'onMessageErrorListener'\n    | 'onMessageTypingListener'\n    | 'onMessageUpdateListener'\n    | 'onMessageDeleteListener'\n    | 'onMessageReactionsListener'\n    | 'onDeliveredStatusListener'\n    | 'onReadStatusListener'\n    | 'onSentMessageCallback'\n    | 'onLastUserActivityListener'\n    | 'onJoinOccupant'\n    | 'onLeaveOccupant'\n    | 'onKickOccupant';\n  // PrivacyList\n  export type PrivacyListItem = {\n    user_id: string | number;\n    action: PrivacyListAction | string;\n    mutualBlock?: boolean;\n  };\n  export type PrivacyList = {\n    name: string;\n    items: PrivacyListItem[];\n  };\n  export type PrivacyListNames = {\n    default: string | null;\n    active: string | null;\n    names: string[];\n  };\n  export type PrivacyListItemParams = {\n    value: string;\n    action: string;\n    order: number;\n    isMutual: boolean;\n  };\n}\n","import { Auth } from '.';\nimport { Config } from '../config';\n\nexport enum ChatProtocol {\n  BOSH = 1,\n  WS = 2,\n}\nexport enum JanusDebugMode {\n  ALL = 'all',\n  TRACE = 'trace',\n  DEBUG = 'debug',\n  VDEBUG = 'vdebug',\n  LOG = 'log',\n  WARN = 'warn',\n  ERROR = 'error',\n}\n\nexport namespace ConnectyCubeConfig {\n  export type Object = Partial<Config>;\n  export type Credentials = {\n    appId: number | string;\n    authKey?: string;\n    token?: string;\n    systemApiKey?: string;\n    authSecret?: string;\n  };\n  export type Endpoints = { api: string; chat: string; muc?: string };\n  export type ChatProtocolURLs = { bosh?: string; websocket?: string; active: ChatProtocol | number };\n  export type ChatStreamManagement = { enable: boolean; acknowledgementTimeout?: number };\n  export type ChatReconnect = { enable: boolean; timeInterval: number };\n  export type Chat = {\n    streamManagement?: ChatStreamManagement;\n    reconnect?: ChatReconnect;\n  };\n  export type VideochatIceServer = {\n    urls: string | string[];\n    url?: string;\n    credential?: string;\n    username?: string;\n  };\n  export type Videochat = {\n    alwaysRelayCalls?: boolean;\n    answerTimeInterval?: number;\n    dialingTimeInterval?: number;\n    disconnectTimeInterval?: number;\n    statsReportTimeInterval?: number | null;\n    iceServers?: VideochatIceServer[];\n  };\n  export type JanusDebug = JanusDebugMode.ALL | JanusDebugMode[] | boolean;\n  export type Conference = {\n    server: string;\n    debug?: JanusDebug;\n  };\n  export type Whiteboard = {\n    server: string;\n  };\n  export type LinkPreview = {\n    server: string;\n  };\n  export type ApiRoutes = {\n    session: string;\n    login: string;\n    users: string;\n    chat: string;\n    blobs: string;\n    subscriptions: string;\n    events: string;\n    data: string;\n    addressbook: string;\n    meetings: string;\n    whiteboards: string;\n    unfurl: string;\n    calls: string;\n    type: string;\n  };\n  export type SessionHandlerResponse = () => void;\n  export type SessionRetryCallback = (session: Partial<Auth.Session>) => void;\n  export type SessionExpiredListener = (\n    handler: SessionHandlerResponse,\n    retry: SessionRetryCallback\n  ) => void | Promise<void>;\n  export type XMPPDataListener = (size: number) => number;\n  export type Listeners = {\n    sessionExpired?: SessionExpiredListener;\n    xmppDataWrite?: XMPPDataListener;\n    xmppDataRead?: XMPPDataListener;\n  };\n  export type Debug = { mode: number | boolean };\n  export type Options = {\n    creds?: Credentials;\n    endpoints?: Endpoints;\n    chatProtocol?: ChatProtocolURLs;\n    chat?: Chat;\n    videochat?: Videochat;\n    conference?: Conference;\n    whiteboard?: Whiteboard;\n    on?: Listeners;\n    timeout?: number;\n    debug?: Debug;\n  };\n}\n","import { DateOrTimestamp, SearchCondition } from './common';\n\nexport enum DataPermission {\n  CREATE = 'create',\n  READ = 'read',\n  UPDATE = 'update',\n  DELETE = 'delete',\n}\nexport enum DataPermissionAccess {\n  OPEN = 'open',\n  OWNER = 'owner',\n  NOT_ALLOWED = 'not_allowed',\n  OPEN_FOR_GROUPS = 'open_for_groups',\n  OPEN_FOR_USERS_IDS = 'open_for_users_ids',\n}\n\nexport namespace ConnectyCubeData {\n  export type PermissionOptions = {\n    access: DataPermissionAccess | string;\n    user_ids?: string[];\n    user_groups?: string[];\n  };\n  export type Permissions = Record<DataPermission | string, PermissionOptions>;\n  export type CreateRecord = Record<string, any> & {\n    permissions?: Permissions;\n  };\n  export type DataRecord = Record<string, any> & {\n    _id: string;\n    _parent_id: string | null;\n    created_at: DateOrTimestamp;\n    updated_at: DateOrTimestamp;\n    user_id: number;\n    permissions: Permissions;\n  };\n  // Request parameters type\n  export type CreateParams = CreateRecord | CreateRecord[];\n  export type ListParams =\n    | ({\n        sort_asc?: string;\n        sort_desc?: string;\n        skip?: number;\n        limit?: number;\n        count?: number;\n        output?: { include?: string[]; exclude?: string[] };\n        near?: string;\n      } & SearchCondition<any>)\n    | undefined;\n  export type ReadParams = { permissions: 1 };\n  export type UpdateOptions = {\n    [key: string]: any;\n    inc?: Record<string, number>;\n    pull?: Record<string, any>;\n    pull_with_filter?: Record<string, Record<string, any>>;\n    pull_all?: Record<string, any[]>;\n    pop?: Record<string, 1 | -1>;\n    push?: Record<string, any[]>;\n    add_to_set?: Record<string, any[]>;\n    update_by_index?: Record<string, Record<number, any>>;\n    search_criteria?: SearchCondition<any>;\n  };\n  // Response data types\n  export type ListResponse = { class_name: string; items: DataRecord[] };\n  export type ReadPermissionsResponse = { record_id: string; permissions: Permissions };\n  export type UpdateResponse = {\n    class_name: string;\n    skip?: number;\n    limit?: number;\n    total_found?: number;\n    not_found?: { ids: string[] };\n    items: DataRecord[];\n  };\n  export type DeleteResponse =\n    | {\n        SuccessfullyDeleted: { ids: string[] };\n        WrongPermissions: { ids: string[] };\n        NotFound: { ids: string[] };\n      }\n    | { total_deleted: number };\n}\n","import { ISODateString, SearchableProps, Timestamp } from './common';\nimport { ConnectyCubeUsers } from './users';\n\nexport enum DialogType {\n  PUBLIC = 1,\n  GROUP = 2,\n  PRIVATE = 3,\n  BROADCAST = 4,\n  MEETING = 5,\n}\nexport enum LastMessageMessageStatus {\n  SENT = 'sent',\n  DELIVERED = 'delivered',\n  READ = 'read',\n}\nexport enum DialogDateProp {\n  CREATED = 'created_at',\n  UPDATED = 'updated_at',\n  LAST_MESSAGE = 'last_message_date_sent',\n}\n\nexport namespace ConnectyCubeDialogs {\n  export type Dialog = {\n    _id: string;\n    name: string;\n    description: string | null;\n    photo: string | null;\n    type: DialogType | number;\n    user_id: number;\n    created_at: ISODateString;\n    updated_at: ISODateString;\n    xmpp_room_jid?: string | null;\n    admins_ids?: number[];\n    last_message: string | null;\n    last_message_date_sent?: Timestamp;\n    last_message_id: string | null;\n    last_message_user_id: number | null;\n    last_message_status: LastMessageMessageStatus | string | null;\n    occupants_ids: number[];\n    occupants_count?: number;\n    pinned_messages_ids?: string[];\n    unread_messages_count: number;\n    extensions?: { [key: string]: any };\n    permissions?: { allow_preview: boolean };\n  };\n  // Request parameters type\n  export type ListParams = SearchableProps<Dialog> & {\n    skip?: number;\n    limit?: number;\n    count?: number;\n    sort_asc?: DialogDateProp | string;\n    sort_desc?: DialogDateProp | string;\n  };\n  export type CreateParams = {\n    type: DialogType;\n    occupants_ids?: (string | number)[] | string;\n    admins_ids?: (string | number)[] | string;\n    name?: string;\n    photo?: string | null;\n    description?: string;\n    extensions?: { [key: string]: any };\n    permissions?: { allow_preview: boolean };\n  };\n  export type UpdateParams = {\n    push_all?: {\n      occupants_ids?: (string | number)[];\n      admins_ids?: (string | number)[];\n      pinned_messages_ids?: string[];\n    };\n    pull_all?: {\n      occupants_ids?: (string | number)[];\n      admins_ids?: (string | number)[];\n      pinned_messages_ids?: string[];\n    };\n    name?: string;\n    photo?: string | null;\n    description?: string;\n    extensions?: { [key: string]: any };\n    permissions?: { allow_preview: boolean };\n  };\n  export type GetPublicOccupantsParams = {\n    limit?: number;\n    skip?: number;\n  };\n  // Response data types\n  export type ListResponse = {\n    total_entries: number;\n    skip: number;\n    limit: number;\n    items: Dialog[];\n  };\n  export type DeleteResponse = {\n    SuccessfullyDeleted: { ids: string[] };\n    NotFound: { ids: string[] };\n    WrongPermissions: { ids: string[] };\n  };\n  export type GetNotificationsSettingsResponse = { notifications: { enabled: number | string } };\n  export type UpdateNotificationsSettingsResponse = { notifications: { enabled: number | string } };\n  export type GetPublicOccupantsResponse = { items: ConnectyCubeUsers.User[] };\n}\n","import ConferenceSession from '../videocalling_conference/ConferenceSession';\n\nexport enum DeviceInputType {\n  VIDEO = 'videoinput',\n  AUDIO = 'audioinput',\n}\nexport enum JanusEvent {\n  PARTICIPANT_JOINED = 'participant_joined',\n  PARTICIPANT_LEFT = 'participant_left',\n  LOCAL_STREAM = 'local_stream',\n  REMOTE_STREAM = 'remote_stream',\n  REMOTE_TRACKS_UPDATED = 'remote_tracks_updated',\n  DATA_CHANNEL_OPEN = 'data_channel_open',\n  DATA_CHANNEL_MESSAGE = 'data_channel_message',\n  ERROR = 'error',\n}\nexport enum JanusCallType {\n  VIDEO = 'video',\n  AUDIO = 'audio',\n}\nexport enum JanusMediaTrackReason {\n  CREATED = 'created',\n  ENDED = 'ended',\n  MUTE = 'mute',\n  UNMUTE = 'unmute',\n}\nexport enum ConferenceEvent {\n  JOIN = 'join',\n  LEFT = 'left',\n  SLOW_LINK = 'slow-link',\n  REMOTE_TRACKS_UPDATED = 'remote-tracks',\n  REMOTE_STREAM = 'remote-stream',\n  REMOTE_CONNECTION_STATE = 'remote-connection-state',\n  DATA_CHANNEL_OPENED = 'data-channel-opened',\n  DATA_CHANNEL_MESSAGE = 'data-channel-message',\n  SESSION_CONNECTION_STATE = 'session-connection-state',\n  ERROR = 'error',\n}\n\nexport namespace ConnectyCubeJanus {\n  export interface SuccessErrorCallbacks {\n    success?: (...args: any[]) => void;\n    error?: (error: any) => void;\n  }\n  export interface InitCallbacks extends SuccessErrorCallbacks {\n    destroyed?: () => void;\n    timeoutSessionCallback?: () => void;\n  }\n  export interface PluginCallbacks extends SuccessErrorCallbacks {\n    localStream?: MediaStream;\n    displayName?: string;\n    iceState?: (iceState: any) => void;\n    slowLink?: (uplink: any, nacks: any) => void;\n    consentDialog?: (on: any) => void;\n    mediaState?: (medium: any, on: any) => void;\n    webrtcState?: (on: any) => void;\n    oncleanup?: () => void;\n  }\n  export type Session = ConferenceSession;\n  export interface RequestCallbacks extends SuccessErrorCallbacks {\n    displayName?: string;\n  }\n  // Listeners\n  export type OnParticipantJoinedListener = (\n    session: Session,\n    userId: number,\n    userName: string,\n    isExist: boolean\n  ) => void;\n  export type OnParticipantLeftListener = (session: Session, ...args: any[]) => void;\n  export type OnSlowLinkListener = (session: Session, userId: number | null, uplink: any, nacks: any) => void;\n  export type OnRemoteStreamListener = (session: Session, userId: number, stream: MediaStream) => void;\n  export type OnRemoteTracksUpdatedListener = (\n    session: Session,\n    userId: number,\n    track: MediaStreamTrack,\n    eventType: any\n  ) => void;\n  export type OnRemoteConnectionStateChangedListener = (session: Session, userId: number, iceState: any) => void;\n  export type OnDataChannelOpenedListener = (session: Session, label: any) => void;\n  export type OnDataChannelMessageListener = (session: Session, label: any, data: any) => void;\n  export type OnSessionConnectionStateChangedListener = (session: Session, iceState: any) => void;\n  export type OnErrorListener = (session: Session, error: any) => void;\n  export type Listeners =\n    | OnParticipantJoinedListener\n    | OnParticipantLeftListener\n    | OnSlowLinkListener\n    | OnRemoteStreamListener\n    | OnRemoteTracksUpdatedListener\n    | OnRemoteConnectionStateChangedListener\n    | OnDataChannelOpenedListener\n    | OnDataChannelMessageListener\n    | OnSessionConnectionStateChangedListener\n    | OnErrorListener;\n  export type ListenerName =\n    | 'onParticipantJoinedListener'\n    | 'onParticipantLeftListener'\n    | 'onSlowLinkListener'\n    | 'onRemoteStreamListener'\n    | 'onRemoteTracksUpdatedListener'\n    | 'onRemoteConnectionStateChangedListener'\n    | 'onDataChannelOpenedListener'\n    | 'onDataChannelMessageListener'\n    | 'onSessionConnectionStateChangedListener'\n    | 'onErrorListener';\n}\n","export enum MediaType {\n  AUDIO = 'audio',\n  VIDEO = 'video',\n  NONE = 'none',\n}\n\nexport namespace ConnectyCubeMedia {\n  export interface ElementOptions {\n    muted?: boolean;\n    mirror?: boolean;\n  }\n  export interface ElementParams {\n    elementId?: string;\n    options?: ElementOptions;\n  }\n  export interface DisplayParams extends DisplayMediaStreamOptions, ElementParams {}\n  export interface UserParams extends MediaStreamConstraints, ElementParams {}\n  export type DeviceIdOrTrackConstraints = MediaTrackConstraints | string;\n  export type TrackConstraintsOrDeviceIds = {\n    audio?: DeviceIdOrTrackConstraints;\n    video?: DeviceIdOrTrackConstraints;\n  };\n}\n","import { DateOrTimestamp, SearchCondition } from './common';\n\nexport enum MeetingDateMetric {\n  MINUTES = 'minutes',\n  HOURS = 'hours',\n  DAYS = 'days',\n  WEEK = 'weeks',\n}\n\nexport namespace ConnectyCubeMeetings {\n  export type Attendee = { id?: number; email?: string };\n  export type Meeting = {\n    _id: string;\n    name?: string;\n    start_date?: DateOrTimestamp;\n    end_date?: DateOrTimestamp;\n    attendees?: Attendee[];\n    record?: boolean | null;\n    chat_dialog_id?: string | null;\n    created_at?: DateOrTimestamp;\n    updated_at?: DateOrTimestamp;\n    host_id?: number;\n    public?: boolean;\n    scheduled?: boolean;\n    notify?: boolean;\n    notify_before?: {\n      metric: MeetingDateMetric | string;\n      value: number; // 'minutes' range [0 - 55], 'hours' range [1 - 24], 'days' range [1 - 30], 'weeks' range [1 - 4]\n    };\n    timezone?: {\n      offset: number; // Minutes UTC offset\n      name: string; // Timezone Name\n    };\n  };\n  export type Recording = {\n    _id: string;\n    room_id: string;\n    participants_ids: number[];\n    updated_at: string;\n    created_at: string;\n    download_url: string;\n    participants_count: number;\n    duration: number;\n    size: number;\n  };\n  // Request parameters type\n  export type GetParams = {\n    _id?: string;\n    limit?: number;\n    offset?: number;\n    start_at?: SearchCondition<DateOrTimestamp>;\n    end_at?: SearchCondition<DateOrTimestamp>;\n    updated_at?: SearchCondition<DateOrTimestamp>;\n    created_at?: SearchCondition<DateOrTimestamp>;\n    scheduled?: SearchCondition<boolean>;\n  };\n  export type CreateParams = {\n    name?: string;\n    start_date?: DateOrTimestamp;\n    end_date?: DateOrTimestamp;\n    attendees?: Attendee[];\n    chat?: boolean;\n    record?: boolean;\n    public?: boolean;\n    scheduled?: boolean;\n    notify?: boolean;\n    notify_before?: {\n      metric: MeetingDateMetric | string;\n      value: number; // 'minutes' range [0 - 55], 'hours' range [1 - 24], 'days' range [1 - 30], 'weeks' range [1 - 4]\n    };\n    timezone?: {\n      offset: number; // Minutes UTC offset\n      name: string; // Timezone Name\n    };\n  };\n  export type UpdateParams = {\n    name: string;\n    start_date: DateOrTimestamp;\n    end_date: DateOrTimestamp;\n    attendees: Attendee[];\n    record?: boolean;\n    public?: boolean;\n    scheduled?: boolean;\n    notify?: boolean;\n    notify_before?: {\n      metric: MeetingDateMetric | string;\n      value: number; // 'minutes' range [0 - 55], 'hours' range [1 - 24], 'days' range [1 - 30], 'weeks' range [1 - 4]\n    };\n    timezone?: {\n      offset: number; // Minutes UTC offset\n      name: string; // Timezone Name\n    };\n  };\n}\n","import { ConnectyCubeConfig } from './config';\nimport { ConnectyCubeAuth } from './auth';\n\nexport enum ProxyMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  DELETE = 'DELETE',\n  HEAD = 'HEAD',\n}\nexport enum ProxyType {\n  JSON = 'json',\n  TEXT = 'text',\n}\n\nexport namespace ConnectyCubeProxy {\n  export type Params = {\n    url: string;\n    type?: ProxyMethod;\n    data?: any;\n    contentType?: boolean;\n    dataType?: ProxyType;\n    useArrayQuery?: boolean;\n    fileToCustomObject?: boolean;\n    authKey?: string;\n    abort_id?: string | number;\n  };\n  export type AbortControllersMap = {\n    [key: string | number]: {\n      controllers: AbortController[];\n      doneRequestsCount?: number;\n    };\n  };\n  export type SDKInstance = {\n    config: ConnectyCubeConfig.Object;\n    session: Partial<ConnectyCubeAuth.Session> | null;\n  };\n  export type ErrorObject = {\n    code?: number;\n    info?: { errors?: { base?: string[] } };\n  };\n}\n","import { DateOrTimestamp } from './common';\n\nexport enum NotificationChannel {\n  APNS = 'apns',\n  VOIP = 'apns_voip',\n  GCM = 'gcm',\n  WEB = 'web',\n}\nexport enum DevicePlatform {\n  IOS = 'ios',\n  ANDROID = 'android',\n  WEB = 'web',\n}\nexport enum PushEnvironment {\n  DEV = 'development',\n  PROD = 'production',\n}\n\nexport namespace ConnectyCubePushNotifications {\n  export type Subscription = {\n    subscription: {\n      id: number | string;\n      notification_channel: {\n        name: NotificationChannel | string;\n      };\n      device: {\n        udid: string;\n        platform: {\n          name: DevicePlatform | string;\n        };\n      };\n    };\n  };\n  export type Event = {\n    event: {\n      id: number;\n      event_type: string | null;\n      message: string | null;\n      date: DateOrTimestamp;\n      period: DateOrTimestamp;\n      name: string | null;\n      occured_count?: number;\n      created_at?: DateOrTimestamp;\n      updated_at?: DateOrTimestamp;\n      end_date?: DateOrTimestamp;\n      active?: boolean | null;\n      application_id: number | null;\n      user_id: number | null;\n      kind: string | null;\n      environment: PushEnvironment | null;\n      tag_query?: any;\n      notification_channel?: {\n        name?: NotificationChannel | null;\n      };\n    };\n  };\n  export type PushTokenBaseParams = {\n    environment: PushEnvironment | string;\n  };\n  export type PushTokenMobileParams = PushTokenBaseParams & {\n    client_identification_sequence: string;\n    bundle_identifier?: string;\n  };\n  export type PushTokenWebParams = PushTokenBaseParams & {\n    web_endpoint: string;\n    web_auth: string;\n    web_p256dh: string;\n  };\n  // Request parameters type\n  export type SubscriptionsCreateParams = {\n    notification_channel: NotificationChannel | string;\n    push_token: PushTokenMobileParams | PushTokenWebParams;\n    device: {\n      platform: DevicePlatform | string;\n      udid: string;\n    };\n  };\n  export type EventsCreateParams = {\n    notification_type: 'push' | string;\n    push_type: NotificationChannel | string;\n    environment: PushEnvironment | string;\n    event_type?: 'one_shot' | string;\n    message?: string | null;\n    user?: {\n      ids: string;\n      tags?: {\n        any?: string;\n        all?: string;\n        exclude?: string;\n      };\n    };\n    external_user?: { ids: string };\n  };\n}\n"],"names":["AddressBookUserDataType","LoginProviderNames","CallSignalingType","CallSessionConnectionState","CallSessionState","CallType","CallEvent","PeerConnectionState","ChatType","ChatEvent","PrivacyListAction","ChatProtocol","JanusDebugMode","DataPermission","DataPermissionAccess","DialogType","LastMessageMessageStatus","DialogDateProp","DeviceInputType","JanusEvent","JanusCallType","JanusMediaTrackReason","ConferenceEvent","MediaType","MeetingDateMetric","ProxyMethod","ProxyType","NotificationChannel","DevicePlatform","PushEnvironment"],"mappings":"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"}