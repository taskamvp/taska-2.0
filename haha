<!-- Updated tasks.css -->
<style>
body { 
    background: #f8f9fa; 
    font-family: 'Poppins', sans-serif; 
    margin: 0; 
    padding: 0; 
    height: 100vh; 
    overflow: hidden; 
    display: flex; 
    flex-direction: column; 
}
.navbar { 
    background: #fff; 
    padding: 1rem 2rem; 
    position: fixed; 
    top: 0; 
    width: 100%; 
    z-index: 1000; 
    border-bottom: 1px solid #e0e0e0; 
    display: flex; 
    justify-content: space-between; 
    align-items: center; 
    box-shadow: 0 2px 5px rgba(0,0,0,0.05); 
}
.navbar .logo { 
    font-size: 1.5rem; 
    color: #1a1a1a; 
}
.navbar .nav-menu { 
    display: flex; 
    gap: 1.5rem; 
    list-style: none; 
}
.navbar .nav-menu li a { 
    color: #1a1a1a; 
    text-decoration: none; 
    font-size: 1rem; 
    transition: color 0.3s; 
}
.navbar .nav-menu li a.active { 
    color: #0000ff; 
}
.navbar .nav-menu li a:hover { 
    color: #4CAF50; 
}
.navbar .hamburger { 
    display: none; 
    font-size: 1.5rem; 
    cursor: pointer; 
    color: #1a1a1a; 
}
.dashboard-content { 
    display: flex; 
    flex: 1; 
    margin-top: 3rem; 
    height: calc(100vh - 60px); 
}
.sidebar-left { 
    width: 30%; 
    background: #fff; 
    border-right: 1px solid #e0e0e0; 
    overflow-y: auto; 
    min-width: 200px; 
    max-width: 400px; 
}
.sidebar-left h3 { 
    font-size: 1.2rem; 
    color: #1a1a1a; 
    padding: 1rem; 
    margin: 0; 
    border-bottom: 1px solid #e0e0e0; 
}
.user-item { 
    display: flex; 
    align-items: center; 
    padding: 0.75rem 1rem; 
    margin: 0.25rem 0; 
    cursor: pointer; 
    transition: background 0.3s; 
    position: relative;
}
.user-item:hover { 
    background: #f1f3f5; 
}
.user-item .profile-pic { 
    width: 40px; 
    height: 40px; 
    border-radius: 50%; 
    margin-right: 0.75rem; 
    object-fit: cover; 
}
.user-item .user-info { 
    color: #1a1a1a; 
    flex: 1;
}
.user-item .user-info .name { 
    font-size: 0.95rem; 
    margin-bottom: 0.1rem; 
}
.user-item .user-info .last-message { 
    font-size: 0.85rem; 
    color: #6c757d; 
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
.user-item.active { 
    background: #f1f3f5; 
}
.user-item.active .user-info .name,
.user-item.active .user-info .last-message { 
    color: #1a1a1a; 
}
.user-item .unread-dot {
    position: absolute;
    top: 50%;
    right: 1rem;
    width: 8px;
    height: 8px;
    background: #FF5252;
    border-radius: 50%;
    transform: translateY(-50%);
}
.pending-requests { 
    margin: 1rem; 
    padding: 0.5rem; 
    border-top: 1px solid #e0e0e0; 
}
.pending-requests h3 { 
    font-size: 1.2rem; 
    color: #1a1a1a; 
    padding: 1rem 0; 
    margin: 0; 
    border-bottom: 1px solid #e0e0e0; 
}
.pending-item { 
    display: flex; 
    align-items: center; 
    padding: 0.75rem 1rem; 
    margin: 0.25rem 0; 
    background: #fff; 
    border-radius: 8px; 
    justify-content: space-between; 
    transition: background 0.3s;
}
.pending-item:hover {
    background: #f1f3f5;
}
.pending-item .user-info { 
    display: flex; 
    align-items: center; 
}
.pending-item .user-info .name { 
    font-size: 0.95rem; 
    color: #1a1a1a; 
}
.pending-item .actions { 
    display: flex; 
    gap: 0.5rem; 
}
.pending-item .actions button { 
    padding: 0.5rem 1rem; 
    border: none; 
    border-radius: 5px; 
    font-size: 0.85rem; 
    cursor: pointer; 
    transition: background 0.3s; 
}
.pending-item .actions .accept-btn { 
    background: #4CAF50; 
    color: #fff; 
}
.pending-item .actions .accept-btn:hover { 
    background: #45a049; 
}
.pending-item .actions .delete-btn { 
    background: #FF5252; 
    color: #fff; 
}
.pending-item .actions .delete-btn:hover { 
    background: #e04848; 
}
.chat-area { 
    width: 42%; 
    background: #fff; 
    border-right: 1px solid #e0e0e0; 
    overflow-y: auto; 
    min-width: 200px; 
    max-width: 600px; 
    display: none; 
    position: relative; 
}
.chat-header { 
    padding: 1rem; 
    border-bottom: 1px solid #e0e0e0; 
    background: #fff; 
    position: sticky; 
    top: 0; 
    z-index: 10; 
    display: flex; 
    align-items: center; 
    gap: 1rem; 
    justify-content: space-between;
}
.chat-header .profile-pic { 
    width: 40px; 
    height: 40px; 
    border-radius: 50%; 
    object-fit: cover; 
}
.chat-header .name { 
    font-size: 1rem; 
    font-weight: 600; 
    color: #1a1a1a; 
}
.chat-header .title { 
    font-size: 0.85rem; 
    color: #6c757d; 
}
.chat-header .menu {
    position: relative;
    cursor: pointer;
}
.chat-header .menu-icon {
    font-size: 1.2rem;
    color: #6c757d;
}
.chat-header .menu-icon:hover {
    color: #1a1a1a;
}
.chat-header .menu-dropdown {
    display: none;
    position: absolute;
    top: 2rem;
    right: 0;
    background: #fff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    z-index: 20;
}
.chat-header .menu-dropdown.active {
    display: block;
}
.chat-header .menu-dropdown button {
    display: block;
    width: 100%;
    padding: 0.5rem 1rem;
    background: none;
    border: none;
    text-align: left;
    font-size: 0.9rem;
    color: #1a1a1a;
    cursor: pointer;
}
.chat-header .menu-dropdown button:hover {
    background: #f1f3f5;
}
.messages { 
    height: calc(100% - 120px); 
    padding: 1rem; 
    overflow-y: auto; 
}
.date-divider {
    text-align: center;
    margin: 1rem 0;
}
.date-divider span {
    background: #f8f9fa;
    padding: 0.25rem 1rem;
    border-radius: 12px;
    font-size: 0.8rem;
    color: #6c757d;
}
.message { 
    padding: 0.75rem 1rem; 
    margin-bottom: 1rem; 
    background: #f8f9fa; 
    border-radius: 12px; 
    max-width: 70%; 
    color: #1a1a1a; 
    font-size: 0.9rem; 
    box-shadow: 0 1px 3px rgba(0,0,0,0.05); 
    position: relative;
}
.message.sent { 
    margin-left: auto; 
    background: #DCF8C6; 
    border: 1px solid #e0e0e0; 
}
.message.received { 
    background: #f8f9fa; 
}
.message.file-message {
    padding: 0.75rem;
    background: #f1f3f5;
    border-radius: 12px;
    max-width: 70%;
    display: flex;
    flex-direction: column;
}
.message.file-message .file-info {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.5rem;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
}
.message.file-message .file-icon {
    font-size: 2rem;
}
.message.file-message .file-details {
    flex: 1;
}
.message.file-message .file-name {
    font-size: 0.95rem;
    color: #1a1a1a;
    font-weight: 500;
}
.message.file-message .file-size {
    font-size: 0.8rem;
    color: #6c757d;
}
.message .message-header { 
    display: flex; 
    align-items: center; 
    margin-bottom: 0.5rem; 
}
.message .message-header .profile-pic { 
    width: 30px; 
    height: 30px; 
    border-radius: 50%; 
    margin-right: 0.5rem; 
    object-fit: cover; 
}
.message .message-header .name { 
    font-size: 0.85rem; 
    font-weight: 500; 
    color: #1a1a1a; 
}
.message .message-header .time { 
    font-size: 0.75rem; 
    color: #6c757d; 
    margin-left: auto; 
    font-style: italic;
}
.message .content {
    word-break: break-word;
}
.message .read-status {
    font-size: 0.75rem;
    color: #6c757d;
    font-style: italic;
    margin-top: 0.25rem;
    opacity: 0.7;
}
.message .reactions {
    display: flex;
    gap: 0.5rem;
    margin-top: 0.5rem;
}
.message .reactions .reaction {
    background: #e0e0e0;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.8rem;
}
.message .reaction-bar {
    display: none;
    position: absolute;
    background: #fff;
    border: 1px solid #e0e0e0;
    border-radius: 20px;
    padding: 0.25rem 0.5rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    z-index: 10;
}
.message:hover .reaction-bar {
    display: flex;
    gap: 0.5rem;
}
.message .reaction-icon {
    font-size: 1.2rem;
    cursor: pointer;
    transition: transform 0.2s, background 0.2s;
    padding: 0.2rem;
    border-radius: 50%;
}
.message .reaction-icon:hover {
    transform: scale(1.3);
    background: #f1f3f5;
}
.message .message-menu {
    position: relative;
}
.message .message-menu-icon {
    font-size: 0.9rem;
    color: #6c757d;
    cursor: pointer;
}
.message .message-menu-icon:hover {
    color: #1a1a1a;
}
.message .message-menu-dropdown {
    display: none;
    position: absolute;
    top: 1.5rem;
    right: 0;
    background: #fff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    z-index: 20;
    min-width: 120px;
}
.message .message-menu-dropdown.active {
    display: block;
}
.message .message-menu-dropdown button {
    display: block;
    width: 100%;
    padding: 0.5rem 1rem;
    background: none;
    border: none;
    text-align: left;
    font-size: 0.9rem;
    color: #1a1a1a;
    cursor: pointer;
    white-space: nowrap;
}
.message .message-menu-dropdown button:hover {
    background: #f1f3f5;
}
.chat-input { 
    width: 100%;
    background: #fff;
    padding: 0.75rem;
    border-top: 1px solid #e0e0e0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    box-shadow: 0 -2px 5px rgba(0,0,0,0.05);
    position: sticky; 
    bottom: 0;
}
.chat-input .input-container {
    flex: 1;
    position: relative;
    background: #f8f9fa;
    border-radius: 25px;
    border: 1px solid #e0e0e0;
    transition: border-color 0.3s, background-color 0.3s;
}
.chat-input .input-container:hover,
.chat-input .input-container:focus-within {
    border-color: #4CAF50;
    background: #fff;
}
.chat-input .input-container textarea {
    width: 100%;
    padding: 0.75rem 2.5rem 0.75rem 1.25rem;
    border: none;
    background: transparent;
    color: #1a1a1a;
    font-size: 0.95rem;
    font-family: 'Poppins', sans-serif;
    resize: none;
    outline: none;
    line-height: 1.4;
    max-height: 100px;
    overflow-y: auto;
}
.chat-input .input-container textarea::placeholder {
    color: #6c757d;
    opacity: 0.7;
}
.chat-input .file-input-label {
    position: absolute;
    right: 2.5rem;
    top: 50%;
    transform: translateY(-50%);
    font-size: 1.1rem;
    color: #6c757d;
    cursor: pointer;
    transition: color 0.3s;
}
.chat-input .file-input-label:hover {
    color: #4CAF50;
}
.chat-input .file-input {
    display: none;
}
.chat-input button { 
    background: none; 
    border: none; 
    cursor: pointer; 
    font-size: 1.2rem; 
    color: #6c757d; 
    transition: color 0.3s; 
}
.chat-input button:hover { 
    color: #4CAF50; 
}
.upload-progress {
    position: absolute;
    bottom: 100%;
    left: 0;
    width: 100%;
    height: 4px;
    background: #e0e0e0;
    border-radius: 2px;
    overflow: hidden;
    display: none;
}
.upload-progress.active {
    display: block;
}
.upload-progress-bar {
    height: 100%;
    background: #4CAF50;
    width: 0;
    transition: width 0.3s ease;
}
.sidebar-right { 
    width: 30%; 
    background: #fff; 
    overflow-y: auto; 
    min-width: 200px; 
    max-width: 400px; 
    display: none; 
    position: relative;
}
.sidebar-right h3 { 
    font-size: 1.2rem; 
    color: #1a1a1a; 
    padding: 1rem; 
    margin: 0; 
    border-bottom: 1px solid #e0e0e0; 
}
.sidebar-right .add-task-btn { 
    display: block; 
    width: 80%; 
    margin: 1rem auto; 
    padding: 0.5rem 1rem; 
    background: #fff; 
    color: #1a1a1a; 
    border: 1px solid #1a1a1a; 
    border-radius: 25px; 
    cursor: pointer; 
    font-size: 0.9rem; 
    font-weight: 500; 
    transition: all 0.3s; 
}
.sidebar-right .add-task-btn:hover { 
    background: #1a1a1a; 
    color: #fff; 
}
.workflow-item { 
    background: #fff; 
    border: 1px solid #e0e0e0; 
    border-radius: 12px; 
    padding: 1rem; 
    margin: 0.5rem 1rem; 
    position: relative; 
    transition: transform 0.2s, box-shadow 0.2s;
}
.workflow-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}
.workflow-item.completed {
    background: #e9ecef;
    opacity: 0.75;
}
.workflow-item .task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}
.workflow-item h4 { 
    color: #1a1a1a; 
    font-size: 1rem; 
    margin: 0; 
}
.workflow-item p { 
    color: #6c757d; 
    font-size: 0.85rem; 
    margin: 0.25rem 0; 
}
.workflow-item .task-menu {
    position: relative;
}
.workflow-item .task-menu-icon {
    font-size: 1rem;
    color: #6c757d;
    cursor: pointer;
}
.workflow-item .task-menu-icon:hover {
    color: #1a1a1a;
}
.workflow-item .task-menu-dropdown {
    display: none;
    position: absolute;
    top: 1.5rem;
    right: 0;
    background: #fff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    z-index: 20;
    min-width: 120px;
}
.workflow-item .task-menu-dropdown.active {
    display: block;
}
.workflow-item .task-menu-dropdown button {
    display: block;
    width: 100%;
    padding: 0.5rem 1rem;
    background: none;
    border: none;
    text-align: left;
    font-size: 0.9rem;
    color: #1a1a1a;
    cursor: pointer;
    white-space: nowrap;
}
.workflow-item .task-menu-dropdown button.delete-task-btn {
    color: #FF5252;
}
.workflow-item .task-menu-dropdown button:hover {
    background: #f1f3f5;
}
.workflow-item .deadline-container {
    position: relative;
    margin: 0.5rem 0;
}
.workflow-item .deadline-slider {
    height: 4px;
    border-radius: 2px;
    transition: width 0.3s ease;
}
.workflow-item .days-left {
    font-size: 0.8rem;
    color: #6c757d;
    margin-top: 0.25rem;
}
.workflow-item .status-select {
    margin-top: 0.5rem;
    padding: 0.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 5px;
    background: #f8f9fa;
    font-size: 0.9rem;
    width: 100%;
    cursor: pointer;
}
.workflow-item .status-select:focus {
    outline: none;
    border-color: #4CAF50;
}
.workflow-item .file-icons {
    display: flex;
    gap: 0.5rem;
    margin-top: 0.5rem;
}
.workflow-item .file-icon-container {
    position: relative;
}
.workflow-item .file-icon {
    font-size: 1.5rem;
}
.workflow-item .file-icon:hover {
    opacity: 0.8;
}
.workflow-item .comment-toggle {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    color: #4CAF50;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}
.workflow-item .comment-toggle:hover {
    color: #45a049;
}
.workflow-item .comment-section {
    display: none;
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: #f8f9fa;
    border-radius: 8px;
}
.workflow-item .comment-section.active {
    display: block;
}
.workflow-item .comments-list {
    max-height: 150px;
    overflow-y: auto;
    margin-bottom: 0.5rem;
}
.workflow-item .comment {
    padding: 0.5rem;
    margin-bottom: 0.5rem;
    border-radius: 8px;
    font-size: 0.85rem;
}
.workflow-item .comment.sent {
    background: #DCF8C6;
    margin-left: 10%;
}
.workflow-item .comment.received {
    background: #fff;
    margin-right: 10%;
}
.workflow-item .comment-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.25rem;
}
.workflow-item .comment-header .name {
    font-weight: 500;
    color: #1a1a1a;
}
.workflow-item .comment-header .time {
    font-size: 0.75rem;
    color: #6c757d;
    font-style: italic;
}
.workflow-item .comment .content {
    word-break: break-word;
}
.workflow-item .comment-input-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}
.workflow-item .comment-input {
    flex: 1;
    padding: 0.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 5px;
    font-size: 0.85rem;
    resize: none;
    outline: none;
}
.workflow-item .comment-input:focus {
    border-color: #4CAF50;
}
.workflow-item .comment-send-btn {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
    color: #6c757d;
    transition: color 0.3s;
}
.workflow-item .comment-send-btn:hover {
    color: #4CAF50;
}
.workflow-item .status-label {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.8rem;
}
.workflow-item .status-label.completed {
    background: #4CAF50;
    color: #fff;
}
.completed-tasks {
    margin: 1rem;
    padding: 0.5rem;
}
.completed-tasks h4 {
    font-size: 1rem;
    color: #1a1a1a;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}
.completed-tasks .toggle-icon {
    transition: transform 0.3s;
}
.completed-tasks .toggle-icon.active {
    transform: rotate(180deg);
}
.completed-tasks-list {
    display: none;
}
.completed-tasks-list.active {
    display: block;
}
.task-popup, .review-popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}
.task-popup.active, .review-popup.active {
    display: flex;
}
.task-popup .header, .review-popup .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}
.task-popup .header h3, .review-popup .header h3 {
    margin: 0;
    color: #1a1a1a;
}
.task-popup .header button, .review-popup .header button {
    background: none;
    border: none;
    font-size: 1.2rem;
    color: #6c757d;
    cursor: pointer;
}
.task-popup .header button:hover, .review-popup .header button:hover {
    color: #1a1a1a;
}
.task-popup .form-group, .review-popup .form-group {
    margin-bottom: 1rem;
}
.task-popup .form-group label, .review-popup .form-group label {
    display: block;
    font-size: 0.9rem;
    color: #1a1a1a;
    margin-bottom: 0.25rem;
}
.task-popup .form-group input,
.task-popup .form-group textarea,
.review-popup .form-group textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 5px;
    font-size: 0.9rem;
    outline: none;
}
.task-popup .form-group input:focus,
.task-popup .form-group textarea:focus,
.review-popup .form-group textarea:focus {
    border-color: #4CAF50;
}
.task-popup .form-group textarea {
    resize: vertical;
}
.review-popup .star-rating {
    display: flex;
    gap: 0.5rem;
}
.review-popup .star-rating i {
    font-size: 1.2rem;
    color: #e0e0e0;
    cursor: pointer;
}
.review-popup .star-rating i.selected {
    color: #FFC107;
}
.task-popup .file-list {
    margin-top: 0.5rem;
}
.task-popup .task-file-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    background: #f8f9fa;
    border-radius: 5px;
    margin-bottom: 0.5rem;
}
.task-popup .task-file-item i {
    font-size: 1.2rem;
}
.task-popup .task-file-item span {
    flex: 1;
    font-size: 0.9rem;
    color: #1a1a1a;
}
.task-popup .task-file-item .remove-file {
    cursor: pointer;
    color: #FF5252;
}
.task-popup .task-file-item .remove-file:hover {
    color: #e04848;
}
.task-popup .actions, .review-popup .actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
}
.task-popup .actions button, .review-popup .actions button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 5px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background 0.3s;
}
.task-popup .actions .cancel-btn, .review-popup .actions .cancel-btn {
    background: #e0e0e0;
    color: #1a1a1a;
}
.task-popup .actions .cancel-btn:hover, .review-popup .actions .cancel-btn:hover {
    background: #d0d0d0;
}
.task-popup .actions .submit-btn, .review-popup .actions .submit-btn {
    background: #4CAF50;
    color: #fff;
}
.task-popup .actions .submit-btn:hover, .review-popup .actions .submit-btn:hover {
    background: #45a049;
}
.confirmation-dialog {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}
.confirmation-dialog.active {
    display: flex;
}
.confirmation-dialog .dialog-box {
    background: #fff;
    padding: 1.5rem;
    border-radius: 12px;
    width: 90%;
    max-width: 400px;
    text-align: center;
}
.confirmation-dialog .dialog-box h3 {
    margin: 0 0 1rem;
    color: #1a1a1a;
}
.confirmation-dialog .dialog-box p {
    margin: 0 0 1.5rem;
    color: #6c757d;
}
.confirmation-dialog .dialog-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
}
.confirmation-dialog .dialog-actions button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 5px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background 0.3s;
}
.confirmation-dialog .dialog-actions .cancel {
    background: #e0e0e0;
    color: #1a1a1a;
}
.confirmation-dialog .dialog-actions .cancel:hover {
    background: #d0d0d0;
}
.confirmation-dialog .dialog-actions .confirm {
    background: #4CAF50;
    color: #fff;
}
.confirmation-dialog .dialog-actions .confirm:hover {
    background: #45a049;
}
.confirmation-dialog .dialog-actions .delete {
    background: #FF5252;
    color: #fff;
}
.confirmation-dialog .dialog-actions .delete:hover {
    background: #e04848;
}
.review-display {
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: #f8f9fa;
    border-radius: 8px;
}
.review-display .stars {
    color: #FFC107;
    font-size: 1rem;
}
.review-display p {
    font-size: 0.85rem;
    color: #1a1a1a;
}
@media (max-width: 768px) {
    .navbar .nav-menu {
        display: none;
        position: absolute;
        top: 60px;
        left: 0;
        width: 100%;
        background: #fff;
        flex-direction: column;
        padding: 1rem;
        border-bottom: 1px solid #e0e0e0;
    }
    .navbar .nav-menu.active {
        display: flex;
    }
    .navbar .hamburger {
        display: block;
    }
    .dashboard-content {
        flex-direction: column;
    }
    .sidebar-left, .chat-area, .sidebar-right {
        width: 100%;
        max-width: none;
        min-width: 0;
    }
    .chat-area, .sidebar-right {
        display: none;
    }
    .chat-area.active, .sidebar-right.active {
        display: block;
    }
}
</style>

<!-- Updated tasks.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Taska Elite - Professional Tasks</title>
    <link rel="stylesheet" href="css/tasks.css">
    <link rel="stylesheet" href="../css/reset.css">
    <link rel="stylesheet" href="../css/global.css">
    <link rel="stylesheet" href="../css/dashboard.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <nav class="navbar">
        <div class="logo">Taska Elite - Professional</div>
        <ul class="nav-menu">
            <li><a href="explore.html">Explore</a></li>
            <li><a href="tasks.html" class="active">Tasks</a></li>
            <li><a href="profile.html">Account</a></li>
        </ul>
        <div class="hamburger">☰</div>
    </nav>

    <div class="dashboard-content">
        <div class="sidebar-left">
            <h3>Connected Students</h3>
            <div id="connections-list"></div>
            <div class="pending-requests">
                <h3>Pending Requests</h3>
                <div id="pending-requests-list"></div>
            </div>
        </div>
        <div class="chat-area" id="chat-area">
            <div class="chat-header" id="chat-header"></div>
            <div class="messages" id="chat-messages"></div>
            <div class="chat-input">
                <div class="input-container">
                    <div class="upload-progress" id="upload-progress">
                        <div class="upload-progress-bar" id="upload-progress-bar"></div>
                    </div>
                    <textarea id="chat-input" placeholder="Type a message..." rows="1"></textarea>
                    <label for="file-input" class="file-input-label"><i class="fas fa-paperclip"></i></label>
                    <input type="file" id="file-input" class="file-input">
                </div>
                <button onclick="sendMessage()"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>
        <div class="sidebar-right" id="workflow-area">
            <h3>Tasks</h3>
            <button class="add-task-btn" onclick="openTaskPopup()">Add New Task</button>
            <div id="workflow-list"></div>
            <div class="completed-tasks">
                <h4 onclick="toggleCompletedTasks()">Completed Tasks <i class="fas fa-chevron-down toggle-icon"></i></h4>
                <div class="completed-tasks-list" id="completed-tasks-list"></div>
            </div>
        </div>
    </div>

    <div class="task-popup" id="task-popup">
        <div class="header">
            <h3 id="popup-title">Add New Task</h3>
            <button onclick="closeTaskPopup()"><i class="fas fa-times"></i></button>
        </div>
        <div class="form-group">
            <label for="task-title">Task Name</label>
            <input type="text" id="task-title" placeholder="Enter task name">
        </div>
        <div class="form-group">
            <label for="task-description">Description</label>
            <textarea id="task-description" placeholder="Enter description" rows="4"></textarea>
        </div>
        <div class="form-group">
            <label for="task-deadline">Deadline</label>
            <input type="date" id="task-deadline">
        </div>
        <div class="form-group">
            <label for="task-file">Attach Files</label>
            <input type="file" id="task-file" multiple>
            <div class="upload-progress" id="task-upload-progress">
                <div class="upload-progress-bar" id="task-upload-progress-bar"></div>
            </div>
            <div id="task-file-list" class="file-list"></div>
        </div>
        <div class="form-group" style="display: none;">
            <label for="task-payment">Cash Payment (USD)</label>
            <input type="number" id="task-payment" placeholder="Enter payment amount">
        </div>
        <div class="actions">
            <button class="cancel-btn" onclick="closeTaskPopup()">Cancel</button>
            <button class="submit-btn" onclick="confirmAction('submitTask', 'Add Task', 'Are you sure you want to add this task?')">Add Task</button>
        </div>
    </div>

    <div class="confirmation-dialog" id="confirmation-dialog">
        <div class="dialog-box">
            <h3 id="dialog-title"></h3>
            <p id="dialog-message"></p>
            <div class="dialog-actions">
                <button class="cancel" onclick="closeConfirmation()">Cancel</button>
                <button id="confirm-button" class="confirm"></button>
            </div>
        </div>
    </div>

    <div class="review-popup" id="review-popup">
        <div class="header">
            <h3>Submit Review</h3>
            <button onclick="closeReviewPopup()"><i class="fas fa-times"></i></button>
        </div>
        <div class="form-group">
            <label>Rating</label>
            <div class="star-rating" id="star-rating">
                <i class="fas fa-star" data-rating="1"></i>
                <i class="fas fa-star" data-rating="2"></i>
                <i class="fas fa-star" data-rating="3"></i>
                <i class="fas fa-star" data-rating="4"></i>
                <i class="fas fa-star" data-rating="5"></i>
            </div>
        </div>
        <div class="form-group">
            <label for="review-feedback">Feedback</label>
            <textarea id="review-feedback" placeholder="Enter your feedback" rows="4"></textarea>
        </div>
        <div class="actions">
            <button class="cancel-btn" onclick="closeReviewPopup()">Cancel</button>
            <button class="submit-btn" onclick="submitReview()">Submit Review</button>
        </div>
    </div>

    <audio id="message-ding" src="../assets/ding.mp3"></audio>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js";
        import { getDatabase, ref, get, push, set, onValue, update, remove } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-database.js";
        import { getAuth } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js";
        import { getStorage, ref as storageRef, uploadBytesResumable, getDownloadURL } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-storage.js";

        const firebaseConfig = {
            apiKey: "AIzaSyDZIDlEtaNRxODoFhRw0xF2yYFBqqBexqo",
            authDomain: "taska-45011.firebaseapp.com",
            databaseURL: "https://taska-45011-default-rtdb.asia-southeast1.firebasedatabase.app",
            projectId: "taska-45011",
            storageBucket: "gs://taska-45011.firebasestorage.app",
            messagingSenderId: "205487498813",
            appId: "1:205487498813:web:0de2c9eab567482781ec54",
            measurementId: "G-G0G1F6GQ9B"
        };

        const app = initializeApp(firebaseConfig);
        const db = getDatabase(app);
        const auth = getAuth(app);
        const storage = getStorage(app);

        let userId = null;
        let selectedStudentId = null;
        let editingTaskId = null;
        let studentData = null;
        let currentUserProfile = null;
        let uploadedTaskFiles = [];
        let selectedRating = 0;
        let reviewingTaskId = null;

        const elements = {
            connectionsList: document.getElementById('connections-list'),
            pendingRequestsList: document.getElementById('pending-requests-list'),
            chatArea: document.getElementById('chat-area'),
            chatHeader: document.getElementById('chat-header'),
            chatMessages: document.getElementById('chat-messages'),
            chatInput: document.getElementById('chat-input'),
            workflowArea: document.getElementById('workflow-area'),
            workflowList: document.getElementById('workflow-list'),
            completedTasksList: document.getElementById('completed-tasks-list'),
            taskPopup: document.getElementById('task-popup'),
            popupTitle: document.getElementById('popup-title'),
            taskTitle: document.getElementById('task-title'),
            taskDescription: document.getElementById('task-description'),
            taskDeadline: document.getElementById('task-deadline'),
            taskFile: document.getElementById('task-file'),
            taskPayment: document.getElementById('task-payment'),
            confirmationDialog: document.getElementById('confirmation-dialog'),
            dialogTitle: document.getElementById('dialog-title'),
            dialogMessage: document.getElementById('dialog-message'),
            confirmButton: document.getElementById('confirm-button'),
            messageDing: document.getElementById('message-ding'),
            fileInput: document.getElementById('file-input'),
            taskFileList: document.getElementById('task-file-list'),
            uploadProgress: document.getElementById('upload-progress'),
            uploadProgressBar: document.getElementById('upload-progress-bar'),
            taskUploadProgress: document.getElementById('task-upload-progress'),
            taskUploadProgressBar: document.getElementById('task-upload-progress-bar'),
            reviewPopup: document.getElementById('review-popup'),
            reviewFeedback: document.getElementById('review-feedback'),
            starRating: document.getElementById('star-rating')
        };

        async function fetchStudentData() {
            if (studentData) return studentData;
            try {
                const response = await fetch('manualstudentlist.json');
                if (!response.ok) throw new Error(`Failed to fetch student data: ${response.statusText}`);
                studentData = await response.json();
                studentData = studentData.map((student, index) => ({
                    ...student,
                    id: student.id || `student_${index}`
                }));
                return studentData;
            } catch (error) {
                console.error('Error fetching student data:', error);
                return [];
            }
        }

        async function fetchCurrentUserProfile() {
            if (currentUserProfile) return currentUserProfile;
            try {
                const students = await fetchStudentData();
                const user = students.find(s => s.id === userId) || {};
                currentUserProfile = {
                    name: user.personal?.name || "Unnamed",
                    profilePic: user.personal?.profilePic 
                        ? user.personal.profilePic 
                        : user.personal?.linkedin 
                            ? `https://via.placeholder.com/40?text=${user.personal?.name?.[0] || 'U'}`
                            : "../assets/avatar/1.png"
                };
                return currentUserProfile;
            } catch (error) {
                console.error('Error fetching current user profile:', error);
                return { name: "Unnamed", profilePic: "../assets/avatar/1.png" };
            }
        }

        function confirmAction(action, title, message, actionParams = {}) {
            elements.dialogTitle.textContent = title;
            elements.dialogMessage.textContent = message;
            elements.confirmationDialog.classList.add('active');
            elements.confirmButton.textContent = title.includes('Delete') ? 'Delete' : 'Confirm';
            elements.confirmButton.className = title.includes('Delete') ? 'delete' : 'confirm';
            elements.confirmButton.onclick = () => {
                window[action](actionParams);
                closeConfirmation();
            };
        }

        function closeConfirmation() {
            elements.confirmationDialog.classList.remove('active');
        }

        function getFileIconClass(type) {
            if (type.includes('pdf')) return 'fas fa-file-pdf';
            if (type.includes('image')) return 'fas fa-file-image';
            if (type.includes('video')) return 'fas fa-file-video';
            if (type.includes('excel') || type.includes('spreadsheet')) return 'fas fa-file-excel';
            if (type.includes('word') || type.includes('doc')) return 'fas fa-file-word';
            return 'fas fa-file';
        }

        function getFileIconColor(type) {
            if (type.includes('pdf')) return '#FF5252';
            if (type.includes('image')) return '#4CAF50';
            if (type.includes('video')) return '#2196F3';
            if (type.includes('excel') || type.includes('spreadsheet')) return '#2E7D32';
            if (type.includes('word') || type.includes('doc')) return '#1976D2';
            return '#6c757d';
        }

        async function init() {
            document.addEventListener('DOMContentLoaded', async () => {
                await fetchStudentData();
                setupEventListeners();
                auth.onAuthStateChanged(user => {
                    if (user) {
                        userId = user.uid;
                        fetchCurrentUserProfile().then(() => {
                            loadConnections();
                            loadPendingRequests();
                            loadCompletedTasks();
                        });
                    } else {
                        console.error("User not authenticated");
                        window.location.href = "../index.html";
                    }
                });
            });
        }

        function setupEventListeners() {
            const hamburger = document.querySelector('.navbar .hamburger');
            const navMenu = document.querySelector('.navbar .nav-menu');
            if (hamburger && navMenu) {
                hamburger.addEventListener('click', () => navMenu.classList.toggle('active'));
            }

            document.addEventListener('click', (e) => {
                const target = e.target;
                if (target.closest('.user-item') && !target.closest('.pending-item')) {
                    const studentId = target.closest('.user-item').dataset.studentId;
                    selectStudent(studentId);
                }
                if (target.matches('.accept-btn')) {
                    const professionalId = target.closest('.pending-item').dataset.professionalId;
                    confirmAction('acceptRequest', 'Accept Request', 'Are you sure you want to accept this connection request?', { professionalId });
                }
                if (target.matches('.delete-btn')) {
                    const professionalId = target.closest('.pending-item').dataset.professionalId;
                    confirmAction('deleteRequest', 'Delete Request', 'Are you sure you want to delete this connection request?', { professionalId });
                }
                if (target.matches('.task-menu-icon')) {
                    const dropdown = target.closest('.task-menu').querySelector('.task-menu-dropdown');
                    dropdown.classList.toggle('active');
                }
                if (target.matches('.task-menu-dropdown button')) {
                    const action = target.dataset.action;
                    const taskId = target.closest('.workflow-item').dataset.taskId;
                    if (action === 'editTask') {
                        openTaskPopup(taskId);
                    } else if (action === 'deleteTask') {
                        confirmAction('deleteTask', 'Delete Task', 'Are you sure you want to delete this task?', { taskId });
                    } else if (action === 'reviewTask') {
                        openReviewPopup(taskId);
                    }
                }
                if (target.matches('.reaction-icon')) {
                    const messageId = target.closest('.message').dataset.messageId;
                    const reaction = target.dataset.reaction;
                    addReaction(messageId, reaction);
                }
                if (target.matches('.message-menu-icon')) {
                    const dropdown = target.closest('.message-menu').querySelector('.message-menu-dropdown');
                    dropdown.classList.toggle('active');
                }
                if (target.matches('.message-menu-dropdown button')) {
                    const messageId = target.closest('.message').dataset.messageId;
                    confirmAction('deleteMessage', 'Delete Message', 'Are you sure you want to delete this message?', { messageId });
                }
                if (target.matches('.comment-toggle')) {
                    const taskId = target.closest('.workflow-item').dataset.taskId;
                    toggleComments(taskId);
                }
                if (target.matches('.comment-send-btn')) {
                    const taskId = target.closest('.workflow-item').dataset.taskId;
                    const commentInput = target.closest('.comment-input-container').querySelector('.comment-input');
                    sendComment(taskId, commentInput.value);
                    commentInput.value = '';
                }
                if (target.matches('.star-rating i')) {
                    selectedRating = parseInt(target.dataset.rating);
                    updateStarRating();
                }
            });

            if (elements.workflowList) {
                elements.workflowList.addEventListener('change', (e) => {
                    if (e.target.matches('.status-select')) {
                        const taskId = e.target.closest('.workflow-item').dataset.taskId;
                        const newStatus = e.target.value;
                        confirmAction('updateStatus', `Update Task Status`, `Are you sure you want to change the task status to "${newStatus}"?`, { taskId, status: newStatus });
                    }
                });
            }

            if (elements.chatInput) {
                elements.chatInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage();
                    }
                });
                elements.chatInput.addEventListener('input', () => {
                    elements.chatInput.style.height = 'auto';
                    elements.chatInput.style.height = `${Math.min(elements.chatInput.scrollHeight, 100)}px`;
                });
            }

            if (elements.fileInput) {
                elements.fileInput.addEventListener('change', async () => {
                    if (elements.fileInput.files.length > 0) {
                        await sendFileMessage(elements.fileInput.files[0]);
                        elements.fileInput.value = '';
                    }
                });
            }

            if (elements.taskFile) {
                elements.taskFile.addEventListener('change', async () => {
                    uploadedTaskFiles = [];
                    elements.taskFileList.innerHTML = '';
                    const files = Array.from(elements.taskFile.files);
                    for (const file of files) {
                        await uploadTaskFile(file);
                    }
                });
            }

            document.addEventListener('click', (e) => {
                if (!e.target.closest('.task-menu')) {
                    document.querySelectorAll('.task-menu-dropdown.active').forEach(dropdown => {
                        dropdown.classList.remove('active');
                    });
                }
                if (!e.target.closest('.message-menu')) {
                    document.querySelectorAll('.message-menu-dropdown.active').forEach(dropdown => {
                        dropdown.classList.remove('active');
                    });
                }
            });

            // Dynamic positioning of reaction bar
            document.addEventListener('mousemove', (e) => {
                if (e.target.closest('.message')) {
                    const message = e.target.closest('.message');
                    const reactionBar = message.querySelector('.reaction-bar');
                    if (reactionBar) {
                        const rect = message.getBoundingClientRect();
                        reactionBar.style.left = `${e.clientX - rect.left - 20}px`;
                        reactionBar.style.top = `${e.clientY - rect.top - 40}px`;
                    }
                }
            });
        }

        async function uploadTaskFile(file) {
            try {
                const storagePath = `tasks/temp/${Date.now()}_${file.name}`;
                const fileRef = storageRef(storage, storagePath);
                const uploadTask = uploadBytesResumable(fileRef, file);

                elements.taskUploadProgress.classList.add('active');
                elements.taskUploadProgressBar.style.width = '0%';

                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        elements.taskUploadProgressBar.style.width = `${progress}%`;
                    },
                    (error) => {
                        console.error('Error uploading task file:', error);
                        elements.taskUploadProgress.classList.remove('active');
                        alert('Failed to upload file.');
                    },
                    async () => {
                        const fileUrl = await getDownloadURL(fileRef);
                        uploadedTaskFiles.push({
                            name: file.name,
                            url: fileUrl,
                            type: file.type
                        });

                        const fileItem = document.createElement('div');
                        fileItem.className = 'task-file-item';
                        fileItem.innerHTML = `
                            <i class="${getFileIconClass(file.type)}" style="color: ${getFileIconColor(file.type)};"></i>
                            <span>${file.name}</span>
                            <i class="fas fa-times remove-file" onclick="removeTaskFile('${file.name}')"></i>
                        `;
                        elements.taskFileList.appendChild(fileItem);

                        elements.taskUploadProgress.classList.remove('active');
                    }
                );
            } catch (error) {
                console.error('Error initiating task file upload:', error);
                elements.taskUploadProgress.classList.remove('active');
                alert('Failed to upload file.');
            }
        }

        window.removeTaskFile = function(fileName) {
            uploadedTaskFiles = uploadedTaskFiles.filter(file => file.name !== fileName);
            const fileItems = elements.taskFileList.querySelectorAll('.task-file-item');
            fileItems.forEach(item => {
                if (item.querySelector('span').textContent === fileName) {
                    item.remove();
                }
            });
        };

        async function loadConnections() {
            if (!elements.connectionsList) return;
            try {
                const connectionsRef = ref(db, `users/${userId}/connections`);
                const snapshot = await get(connectionsRef);
                if (snapshot.exists()) {
                    const connections = snapshot.val();
                    let hasConnections = false;
                    const students = await fetchStudentData();
                    elements.connectionsList.innerHTML = '';
                    for (const studentId in connections) {
                        if (connections[studentId].status === "connected") {
                            hasConnections = true;
                            const student = students.find(s => s.id === studentId) || {};
                            const userName = student.personal?.name || "Unnamed";
                            const profilePic = student.personal?.profilePic 
                                ? student.personal.profilePic 
                                : student.personal?.linkedin 
                                    ? `https://via.placeholder.com/40?text=${userName[0]}`
                                    : "../assets/avatar/1.png";
                            const chatId = [userId, studentId].sort().join("+");
                            const chatRef = ref(db, `chats/${chatId}/messages`);
                            let lastMessage = "No messages yet";
                            let hasUnread = false;
                            const chatSnapshot = await get(chatRef);
                            if (chatSnapshot.exists()) {
                                const messages = Object.values(chatSnapshot.val());
                                const lastMsg = messages[messages.length - 1];
                                lastMessage = lastMsg.file ? `[File] ${lastMsg.file.name}` : lastMsg.content || "No messages yet";
                                hasUnread = messages.some(msg => msg.senderId !== userId && !msg.read);
                            }
                            const userItem = document.createElement('div');
                            userItem.className = 'user-item';
                            userItem.dataset.studentId = studentId;
                            userItem.innerHTML = `
                                <img src="${profilePic}" alt="${userName}" class="profile-pic">
                                <div class="user-info">
                                    <div class="name">${userName}</div>
                                    <div class="last-message">${lastMessage}</div>
                                </div>
                                ${hasUnread ? '<div class="unread-dot"></div>' : ''}
                            `;
                            elements.connectionsList.appendChild(userItem);
                        }
                    }
                    if (!hasConnections) {
                        elements.connectionsList.innerHTML = '<p>No connected students found.</p>';
                    }
                } else {
                    elements.connectionsList.innerHTML = '<p>No connected students found.</p>';
                }
            } catch (error) {
                console.error("Error loading connections:", error);
                elements.connectionsList.innerHTML = '<p>Error loading connections.</p>';
            }
        }

        async function loadPendingRequests() {
            if (!elements.pendingRequestsList) return;
            try {
                const connectionsRef = ref(db, `users/${userId}/connections`);
                const snapshot = await get(connectionsRef);
                if (snapshot.exists()) {
                    const connections = snapshot.val();
                    let hasPending = false;
                    const students = await fetchStudentData();
                    elements.pendingRequestsList.innerHTML = '';
                    for (const professionalId in connections) {
                        if (connections[professionalId].status === "pending") {
                            hasPending = true;
                            const student = students.find(s => s.id === professionalId) || {};
                            const userName = student.personal?.name || "Unnamed";
                            const profilePic = student.personal?.profilePic 
                                ? student.personal.profilePic 
                                : student.personal?.linkedin 
                                    ? `https://via.placeholder.com/40?text=${userName[0]}`
                                    : "../assets/avatar/1.png";
                            const pendingItem = document.createElement('div');
                            pendingItem.className = 'pending-item user-item';
                            pendingItem.dataset.professionalId = professionalId;
                            pendingItem.innerHTML = `
                                <div class="user-info">
                                    <img src="${profilePic}" alt="${userName}" class="profile-pic">
                                    <div class="name">${userName}</div>
                                </div>
                                <div class="actions">
                                    <button class="delete-btn">Delete</button>
                                </div>
                            `;
                            elements.pendingRequestsList.appendChild(pendingItem);
                        }
                    }
                    if (!hasPending) {
                        document.querySelector('.pending-requests').style.display = 'none';
                    } else {
                        document.querySelector('.pending-requests').style.display = 'block';
                    }
                } else {
                    elements.pendingRequestsList.innerHTML = '<p>No pending requests.</p>';
                }
            } catch (error) {
                console.error("Error loading pending requests:", error);
                elements.pendingRequestsList.innerHTML = '<p>Error loading pending requests.</p>';
            }
        }

        async function acceptRequest({ professionalId }) {
            try {
                const studentConnectionRef = ref(db, `users/${userId}/connections/${professionalId}`);
                const professionalConnectionRef = ref(db, `users/${professionalId}/connections/${userId}`);
                await update(studentConnectionRef, { status: "connected" });
                await update(professionalConnectionRef, { status: "connected" });
                loadConnections();
                loadPendingRequests();
            } catch (error) {
                console.error("Error accepting request:", error);
                alert("Failed to accept request.");
            }
        }

        async function deleteRequest({ professionalId }) {
            try {
                const studentConnectionRef = ref(db, `users/${userId}/connections/${professionalId}`);
                const professionalConnectionRef = ref(db, `users/${professionalId}/connections/${userId}`);
                await remove(studentConnectionRef);
                await remove(professionalConnectionRef);
                window.location.reload();
                loadConnections();
                loadPendingRequests();
            } catch (error) {
                console.error("Error deleting request:", error);
                alert("Failed to delete request.");
            }
        }

        async function deleteConnection({ studentId }) {
            try {
                const studentConnectionRef = ref(db, `users/${userId}/connections/${studentId}`);
                const professionalConnectionRef = ref(db, `users/${studentId}/connections/${userId}`);
                await remove(studentConnectionRef);
                await remove(professionalConnectionRef);
                loadConnections();
                loadPendingRequests();
                elements.chatArea.style.display = 'none';
                elements.workflowArea.style.display = 'none';
                selectedStudentId = null;
            } catch (error) {
                console.error("Error deleting connection:", error);
                alert("Failed to delete connection.");
            }
        }

        async function deleteTask({ taskId }) {
            try {
                const taskRef = ref(db, `tasks/${taskId}`);
                await remove(taskRef);
                loadWorkflows();
                loadCompletedTasks();
            } catch (error) {
                console.error("Error deleting task:", error);
                alert("Failed to delete task.");
            }
        }

        async function deleteMessage({ messageId }) {
            try {
                const chatId = [userId, selectedStudentId].sort().join("+");
                const messageRef = ref(db, `chats/${chatId}/messages/${messageId}`);
                await remove(messageRef);
            } catch (error) {
                console.error("Error deleting message:", error);
                alert("Failed to delete message.");
            }
        }

        function selectStudent(studentId) {
            selectedStudentId = studentId;
            document.querySelectorAll('.user-item').forEach(item => {
                item.classList.toggle('active', item.dataset.studentId === studentId);
            });
            if (elements.chatArea) elements.chatArea.style.display = 'block';
            if (elements.workflowArea) elements.workflowArea.style.display = 'block';
            loadChatHeader();
            loadChat();
            loadWorkflows();
            loadCompletedTasks();
        }

        async function loadChatHeader() {
            if (!elements.chatHeader) return;
            try {
                const students = await fetchStudentData();
                const student = students.find(s => s.id === selectedStudentId) || {};
                const userName = student.personal?.name || "Unnamed";
                const userTitle = student.education?.branch || "";
                const profilePic = student.personal?.profilePic 
                    ? student.personal.profilePic 
                    : student.personal?.linkedin 
                        ? `https://via.placeholder.com/40?text=${userName[0]}`
                        : "../assets/avatar/1.png";
                elements.chatHeader.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 1rem;">
                        <img src="${profilePic}" alt="${userName}" class="profile-pic">
                        <div>
                            <div class="name">${userName}</div>
                            <div class="title">${userTitle}</div>
                        </div>
                    </div>
                    <div class="menu">
                        <i class="fas fa-ellipsis-v menu-icon"></i>
                        <div class="menu-dropdown">
                            <button data-action="deleteConnection">Delete Connection</button>
                        </div>
                    </div>
                `;
            } catch (error) {
                console.error("Error loading chat header:", error);
                elements.chatHeader.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 1rem;">
                        <img src="../assets/avatar/1.png" alt="Unnamed" class="profile-pic">
                        <div>
                            <div class="name">Unnamed</div>
                            <div class="title"></div>
                        </div>
                    </div>
                    <div class="menu">
                        <i class="fas fa-ellipsis-v menu-icon"></i>
                        <div class="menu-dropdown">
                            <button data-action="deleteConnection">Delete Connection</button>
                        </div>
                    </div>
                `;
            }
        }

        function formatMessageDate(timestamp) {
            const now = new Date();
            const messageDate = new Date(timestamp);
            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            const yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);
            const messageDay = new Date(messageDate.getFullYear(), messageDate.getMonth(), messageDate.getDate());
            if (messageDay.getTime() === today.getTime()) {
                return 'Today';
            } else if (messageDay.getTime() === yesterday.getTime()) {
                return 'Yesterday';
            } else {
                return messageDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            }
        }

        async function loadChat() {
            if (!elements.chatMessages) return;
            elements.chatMessages.innerHTML = '<div class="message">Loading messages...</div>';
            if (selectedStudentId) {
                const chatId = [userId, selectedStudentId].sort().join("+");
                const chatRef = ref(db, `chats/${chatId}/messages`);
                const currentUser = await fetchCurrentUserProfile();
                onValue(chatRef, async (snapshot) => {
                    elements.chatMessages.innerHTML = '';
                    if (snapshot.exists()) {
                        const messages = Object.entries(snapshot.val())
                            .map(([id, msg]) => ({ id, ...msg }))
                            .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
                        const students = await fetchStudentData();
                        const student = students.find(s => s.id === selectedStudentId) || {};
                        let lastDate = null;
                        messages.forEach(msg => {
                            const isSent = msg.senderId === userId;
                            const senderName = isSent ? currentUser.name : (student.personal?.name || "Unnamed");
                            const profilePic = isSent 
                                ? currentUser.profilePic
                                : student.personal?.profilePic 
                                    ? student.personal.profilePic 
                                    : student.personal?.linkedin 
                                        ? `https://via.placeholder.com/40?text=${senderName[0]}`
                                        : "../assets/avatar/1.png";
                            const time = new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                            const date = formatMessageDate(msg.timestamp);
                            if (date !== lastDate) {
                                const dateDivider = document.createElement('div');
                                dateDivider.className = 'date-divider';
                                dateDivider.innerHTML = `<span>${date}</span>`;
                                elements.chatMessages.appendChild(dateDivider);
                                lastDate = date;
                            }
                            const messageDiv = document.createElement('div');
                            messageDiv.className = `message ${isSent ? 'sent' : 'received'} ${msg.file ? 'file-message' : ''}`;
                            messageDiv.dataset.messageId = msg.id;
                            let reactionsHTML = '';
                            if (msg.reactions) {
                                reactionsHTML = Object.entries(msg.reactions).map(([reaction, count]) => `
                                    <span class="reaction">${reaction} ${count}</span>
                                `).join('');
                            }
                            if (msg.file) {
                                const fileSize = msg.file.size ? (msg.file.size / 1024).toFixed(2) + ' KB' : 'Unknown size';
                                messageDiv.innerHTML = `
                                    <div class="message-header">
                                        <img src="${profilePic}" alt="${senderName}" class="profile-pic">
                                        <div class="name">${senderName}</div>
                                        <div class="time">${time}</div>
                                    </div>
                                    <a href="${msg.file.url}" download="${msg.file.name}" target="_blank">
                                        <div class="file-info">
                                            <i class="${getFileIconClass(msg.file.type)} file-icon" style="color: ${getFileIconColor(msg.file.type)};"></i>
                                            <div class="file-details">
                                                <div class="file-name">${msg.file.name}</div>
                                                <div class="file-size">${fileSize}</div>
                                            </div>
                                        </div>
                                    </a>
                                    <div class="read-status">${msg.read ? 'Seen' : 'Sent'}</div>
                                    <div class="reactions">${reactionsHTML}</div>
                                    <div class="reaction-bar">
                                        <span class="reaction-icon" data-reaction="🤝">🤝</span>
                                        <span class="reaction-icon" data-reaction="👍">👍</span>
                                        <span class="reaction-icon" data-reaction="❤️">❤️</span>
                                        <span class="reaction-icon" data-reaction="😂">😂</span>
                                        <span class="reaction-icon" data-reaction="😊">😊</span>
                                        <div class="message-menu">
                                            <i class="fas fa-ellipsis-h message-menu-icon"></i>
                                            <div class="message-menu-dropdown">
                                                <button data-action="deleteMessage">Delete Message</button>
                                            </div>
                                        </div>
                                    </div>
                                `;
                            } else {
                                messageDiv.innerHTML = `
                                    <div class="message-header">
                                        <img src="${profilePic}" alt="${senderName}" class="profile-pic">
                                        <div class="name">${senderName}</div>
                                        <div class="time">${time}</div>
                                    </div>
                                    <div class="content">${msg.content}</div>
                                    <div class="read-status">${msg.read ? 'Seen' : 'Sent'}</div>
                                    <div class="reactions">${reactionsHTML}</div>
                                    <div class="reaction-bar">
                                        <span class="reaction-icon" data-reaction="🤝">🤝</span>
                                        <span class="reaction-icon" data-reaction="👍">👍</span>
                                        <span class="reaction-icon" data-reaction="❤️">❤️</span>
                                        <span class="reaction-icon" data-reaction="😂">😂</span>
                                        <span class="reaction-icon" data-reaction="😊">😊</span>
                                        <div class="message-menu">
                                            <i class="fas fa-ellipsis-h message-menu-icon"></i>
                                            <div class="message-menu-dropdown">
                                                <button data-action="deleteMessage">Delete Message</button>
                                            </div>
                                        </div>
                                    </div>
                                `;
                            }
                            elements.chatMessages.appendChild(messageDiv);
                        });
                        elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;
                        messages.forEach(msg => {
                            if (msg.senderId !== userId && !msg.read) {
                                update(ref(db, `chats/${chatId}/messages/${msg.id}`), { read: true });
                            }
                        });
                    } else {
                        elements.chatMessages.innerHTML = '<div class="message">No messages yet</div>';
                    }
                });
            }
        }

        async function addReaction(messageId, reaction) {
            try {
                const chatId = [userId, selectedStudentId].sort().join("+");
                const messageRef = ref(db, `chats/${chatId}/messages/${messageId}`);
                const snapshot = await get(messageRef);
                if (snapshot.exists()) {
                    const message = snapshot.val();
                    const reactions = message.reactions || {};
                    reactions[reaction] = (reactions[reaction] || 0) + 1;
                    await update(messageRef, { reactions });
                }
            } catch (error) {
                console.error("Error adding reaction:", error);
                alert("Failed to add reaction.");
            }
        }

        async function sendMessage() {
            if (!elements.chatInput) return;
            const content = elements.chatInput.value.trim();
            if (!content || !selectedStudentId) return;
            const chatId = [userId, selectedStudentId].sort().join("+");
            const messageRef = ref(db, `chats/${chatId}/messages`);
            try {
                const currentUser = await fetchCurrentUserProfile();
                const newMessage = {
                    senderId: userId,
                    senderName: currentUser.name,
                    content,
                    timestamp: new Date().toISOString(),
                    read: false
                };
                await push(messageRef, newMessage);
                elements.chatInput.value = '';
                elements.chatInput.style.height = 'auto';
                if (elements.messageDing) {
                    elements.messageDing.play().catch(error => console.error("Error playing ding sound:", error));
                }
            } catch (error) {
                console.error("Error sending message:", error);
                alert("Failed to send message.");
            }
        }

        async function sendFileMessage(file) {
            if (!selectedStudentId) return;
            const chatId = [userId, selectedStudentId].sort().join("+");
            const messageRef = ref(db, `chats/${chatId}/messages`);
            try {
                const storagePath = `chats/${chatId}/${Date.now()}_${file.name}`;
                const fileRef = storageRef(storage, storagePath);
                const uploadTask = uploadBytesResumable(fileRef, file);

                elements.uploadProgress.classList.add('active');
                elements.uploadProgressBar.style.width = '0%';

                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        elements.uploadProgressBar.style.width = `${progress}%`;
                    },
                    (error) => {
                        console.error('Error uploading file:', error);
                        elements.uploadProgress.classList.remove('active');
                        alert('Failed to upload file.');
                    },
                    async () => {
                        const fileUrl = await getDownloadURL(fileRef);
                        const currentUser = await fetchCurrentUserProfile();
                        const newMessage = {
                            senderId: userId,
                            senderName: currentUser.name,
                            file: {
                                name: file.name,
                                url: fileUrl,
                                type: file.type,
                                size: file.size
                            },
                            timestamp: new Date().toISOString(),
                            read: false
                        };
                        await push(messageRef, newMessage);
                        elements.uploadProgress.classList.remove('active');
                        if (elements.messageDing) {
                            elements.messageDing.play().catch(error => console.error("Error playing ding sound:", error));
                        }
                    }
                );
            } catch (error) {
                console.error("Error initiating file upload:", error);
                elements.uploadProgress.classList.remove('active');
                alert("Failed to upload file.");
            }
        }

        async function openTaskPopup(taskId = null) {
            if (!elements.taskPopup || !elements.popupTitle || !elements.taskTitle ||
                !elements.taskDescription || !elements.taskDeadline || !elements.taskFile ||
                !elements.taskPayment) return;

            uploadedTaskFiles = [];
            elements.taskFileList.innerHTML = '';

            if (taskId) {
                editingTaskId = taskId;
                elements.popupTitle.textContent = 'Edit Task';
                const taskRef = ref(db, `tasks/${taskId}`);
                try {
                    const snapshot = await get(taskRef);
                    if (